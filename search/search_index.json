{"config":{"indexing":"full","lang":["ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Blog 2023 \u4e00\u4e2a\u5173\u4e8e SSH\u3001ZSH\u3001Proxy \u548c IPv6 \u7684\u95ee\u9898 \u4e00\u4e2a Python 3 \u4e2d\u7684\u6d45\u62f7\u8d1d\u95ee\u9898 2022 \u7b80\u5355\u8bf4\u8bf4 nohup Why it is not recommended to use non-const reference input parameters in C++ Deploy DOMjudge with Docker Google Code Jam Round 2 2022 Record DOMjudge Team Account Import Guide How to manage multiple git accounts \u5c0f\u7403\u79f0\u91cd\u95ee\u9898 Something About Curiously Recurring Template Pattern(CRTP) Google Code Jam Round 1A 2022 Tutorial Google Code Jam Qualification Round 2022 Tutorial","title":"Home"},{"location":"#2023","text":"\u4e00\u4e2a\u5173\u4e8e SSH\u3001ZSH\u3001Proxy \u548c IPv6 \u7684\u95ee\u9898 \u4e00\u4e2a Python 3 \u4e2d\u7684\u6d45\u62f7\u8d1d\u95ee\u9898","title":"2023"},{"location":"#2022","text":"\u7b80\u5355\u8bf4\u8bf4 nohup Why it is not recommended to use non-const reference input parameters in C++ Deploy DOMjudge with Docker Google Code Jam Round 2 2022 Record DOMjudge Team Account Import Guide How to manage multiple git accounts \u5c0f\u7403\u79f0\u91cd\u95ee\u9898 Something About Curiously Recurring Template Pattern(CRTP) Google Code Jam Round 1A 2022 Tutorial Google Code Jam Qualification Round 2022 Tutorial","title":"2022"},{"location":"2022/10/how-to-migrate-a-mysql-database/","text":"How to migrate a MySQL database Migrating a database mysqldump --set-gtid-purged = OFF --add-drop-database -h ${ your mysql host } -u ${ your username } -p --databases ${ your database name } > ${ your database name } .sql Reference How do you mysqldump specific table(s)? mysqldump with create database line","title":"How to migrate a MySQL database"},{"location":"2022/10/how-to-migrate-a-mysql-database/#migrating-a-database","text":"mysqldump --set-gtid-purged = OFF --add-drop-database -h ${ your mysql host } -u ${ your username } -p --databases ${ your database name } > ${ your database name } .sql","title":"Migrating a database"},{"location":"2022/10/how-to-migrate-a-mysql-database/#reference","text":"How do you mysqldump specific table(s)? mysqldump with create database line","title":"Reference"},{"location":"2022/4/google-code-jam/qualification-round-2022/","text":"Google Code Jam Qualification Round 2022 Tutorial Contents Info Problems Punched Cards 3D Printing d1000000 Chain Reactions Twisty Little Passages Info Practice Link Code Repo Link Score: 71 Rank: 3630 Problems Punched Cards \u9898\u610f\uff1a \u7ed9\u51fa R R \u548c C C \uff0c\u6309\u6307\u5b9a\u89c4\u5219\u753b\u56fe\u3002 \u601d\u8def\uff1a \u6a21\u62df\u5373\u53ef\u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void run () { int n , m ; cin >> n >> m ; auto res = vector < string > (); for ( int i = 0 ; i < n * 2 + 1 ; i ++ ) { string s = \"\" ; string t = i % 2 ? \"|.\" : \"+-\" ; for ( int j = 0 ; j < m * 2 + 1 ; j ++ ) { s += t [ j & 1 ]; } res . push_back ( s ); } res [ 0 ][ 0 ] = res [ 0 ][ 1 ] = res [ 1 ][ 0 ] = res [ 1 ][ 1 ] = '.' ; for ( const auto & s : res ) { cout << s << \" \\n \" ; } } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \\n \" ; run (); } return 0 ; } 3D Printing \u9898\u610f\uff1a \u6709 n n \u53f0\u6253\u5370\u673a\uff0c\u6bcf\u53f0\u6253\u5370\u673a\u9700\u8981 4 4 \u79cd\u58a8\u6c34\uff0c\u7ed9\u51fa\u6bcf\u53f0\u6253\u5370\u673a\u4e2d\u6bcf\u79cd\u58a8\u6c34\u7684\u542b\u91cf\u3002 \u73b0\u5728\u8981\u7528\u6bcf\u4e2a\u6253\u5370\u673a\u5206\u522b\u6253\u5370\u4e00\u4e2a logo\uff0c\u6253\u5370 logo \u9700\u8981 10^6 10^6 \u5355\u4f4d\u7684\u58a8\u6c34\uff0c\u989c\u8272\u4e0d\u9650\uff0c\u4f46\u662f\u6bcf\u79cd\u989c\u8272\u7684\u7528\u91cf\u9700\u8981\u4e00\u81f4\u3002 \u95ee\u6bcf\u79cd\u989c\u8272\u7684\u58a8\u6c34\u7528\u91cf\u662f\u591a\u5c11\uff0c\u80fd\u591f\u6ee1\u8db3\u8981\u6c42\u3002 \u601d\u8def\uff1a \u8d2a\u5fc3\u5373\u53ef\u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void run () { constexpr int Max = 1000000 ; auto vec = vector < vector < int >> ( 4 , vector < int > ( 3 , 0 )); for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { int x ; cin >> x ; vec [ j ][ i ] = x ; } } auto res = vector < int > (); for ( int i = 0 ; i < 4 ; i ++ ) { res . push_back ( * min_element ( all ( vec [ i ]))); } int tot = accumulate ( all ( res ), 0 ); if ( tot < Max ) { cout << \"IMPOSSIBLE \\n \" ; return ; } for ( int i = 0 ; i < 4 ; i ++ ) { if ( tot > Max ) { if ( res [ i ] <= tot - Max ) { tot -= res [ i ]; res [ i ] = 0 ; } else { res [ i ] -= tot - Max ; tot = Max ; } } cout << res [ i ] << \" \\n \" [ i == 3 ]; } } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; } d1000000 \u9898\u610f\uff1a \u6709 n n \u4e2a\u9ab0\u5b50\uff0c\u7b2c i i \u4e2a\u9ab0\u5b50\u662f a_i a_i \u7ef4\u7684\uff0c\u5373\u542b\u6709\u6570\u5b57 [1, a_i] [1, a_i] \u3002 \u73b0\u5728\u76ee\u6807\u662f\u8981\u5c06\u4e00\u90e8\u5206\u9ab0\u5b50\u8fde\u8d77\u6765\uff0c\u5e76\u4e14\u6bcf\u4e2a\u9ab0\u5b50\u5411\u4e0a\u7684\u90a3\u4e00\u9762\u7684\u6570\u5b57\u662f\u4e2a\u987a\u5b50\uff0c\u4f46\u662f\u4e0d\u8981\u6c42\u4ece 1 1 \u5f00\u59cb\u3002 \u601d\u8def\uff1a \u8d2a\u5fc3 \u5148\u4e0d\u65ad\u5f80\u53f3\u8fb9\u6269 \u53f3\u8fb9\u6269\u4e0d\u4e86\u4e86\u518d\u5f80\u5de6\u8fb9\u6269 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void run () { int n ; cin >> n ; auto vec = vector < int > ( n , 0 ); for ( int i = 0 ; i < n ; i ++ ) { int x ; cin >> x ; vec [ i ] = x ; } sort ( all ( vec )); int l = vec [ 0 ], r = vec [ 0 ]; for ( int i = 1 ; i < n ; i ++ ) { if ( vec [ i ] > r ) { ++ r ; } else if ( l > 1 ) { -- l ; } } cout << r - l + 1 << \" \\n \" ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; } Chain Reactions \u9898\u610f\uff1a \u6709 n n \u4e2a\u53cd\u5e94\u5806\uff0c\u6bcf\u4e2a\u53cd\u5e94\u5806\u7684 fun \u503c\u4e3a F_i F_i \u3002 \u90e8\u5206\u53cd\u5e94\u5806\u80fd\u8fde\u8d77\u6765\uff0c\u53d1\u751f\u8fde\u9501\u53cd\u5e94\u3002 \u8fde\u9501\u53cd\u5e94\u4ea7\u751f\u7684 fun \u503c\u662f\u53d1\u751f\u53cd\u5e94\u7684\u53cd\u5e94\u5806\u96c6\u5408\u4e2d\u7684 fun \u503c\u7684\u6700\u5927\u503c\u3002 \u4f46\u662f\u4e00\u4e2a\u53cd\u5e94\u5806\u53ea\u80fd\u53d1\u751f\u4e00\u6b21\u53cd\u5e94\uff0c\u5982\u679c\u88ab\u8fde\u9501\u53cd\u5e94\u591a\u6b21\u89e6\u53d1\uff0c\u5728\u7b2c\u4e8c\u6b21\u53ca\u540e\u7eed\u4e2d\u88ab\u89e6\u53d1\u65f6\u5b83\u4e0d\u4f1a\u53d1\u751f\u53cd\u5e94\u3002 \u8fde\u9501\u53cd\u5e94\u7684\u5173\u7cfb\u662f\u4e00\u4e2a\u6811\uff0c\u4e0d\u662f\u56fe\u3002 \u73b0\u5728\u80fd\u624b\u52a8\u89e6\u53d1\u67d0\u4e2a\u53cd\u5e94\u5806\uff0c\u4f7f\u5176\u53d1\u751f\u53cd\u5e94\uff0c\u5982\u679c\u8be5\u53cd\u5e94\u5806\u540e\u7eed\u8fde\u7740\u53e6\u5916\u7684\u53cd\u5e94\u5806\uff0c\u90a3\u4e48\u5c31\u4f1a\u53d1\u751f\u8fde\u9501\u53cd\u5e94\u3002 \u95ee\u4ee5\u6700\u4f18\u7684\u65b9\u6848\u53bb\u624b\u52a8\u89e6\u53d1\u53cd\u5e94\u5806\uff0c\u80fd\u83b7\u5f97\u7684\u6700\u5927 fun \u503c\u4e4b\u548c\u662f\u591a\u5c11\uff1f \u601d\u8def\uff1a \u8003\u8651\u6811\u5f62 dp\u3002 \u6bcf\u6b21\u5c06\u6700\u5c0f\u7684 fun \u503c\u5f80\u7236\u4eb2\u5408\u5e76\u3002 \u5176\u5b83\u513f\u5b50\u7684\u503c\u76f4\u63a5\u52a0\u5230\u7b54\u6848\u4e2d\u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head const int N = 1e5 + 10 ; int n , a [ N ], f [ N ]; vector < vector < int >> G ; ll res ; ll dfs ( int rt ) { if ( G [ rt ]. empty ()) { return a [ rt ]; } vector < int > f ; for ( const auto & son : G [ rt ]) { f . push_back ( dfs ( son )); } sort ( all ( f )); res += accumulate ( all ( f ), 0l l ) - f [ 0 ]; return max ( a [ rt ], f [ 0 ]); } void run () { cin >> n ; G . clear (); G . resize ( n + 1 ); res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; auto rts = vector < int > (); for ( int i = 1 ; i <= n ; i ++ ) { cin >> f [ i ]; if ( f [ i ]) { G [ f [ i ]]. push_back ( i ); } else { rts . push_back ( i ); } } for ( const auto & rt : rts ) { res += dfs ( rt ); } cout << res << \" \\n \" ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; } Twisty Little Passages \u7559\u5751\u3002","title":"Google Code Jam Qualification Round 2022 Tutorial"},{"location":"2022/4/google-code-jam/qualification-round-2022/#info","text":"Practice Link Code Repo Link Score: 71 Rank: 3630","title":"Info"},{"location":"2022/4/google-code-jam/qualification-round-2022/#problems","text":"","title":"Problems"},{"location":"2022/4/google-code-jam/qualification-round-2022/#punched-cards","text":"\u9898\u610f\uff1a \u7ed9\u51fa R R \u548c C C \uff0c\u6309\u6307\u5b9a\u89c4\u5219\u753b\u56fe\u3002 \u601d\u8def\uff1a \u6a21\u62df\u5373\u53ef\u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void run () { int n , m ; cin >> n >> m ; auto res = vector < string > (); for ( int i = 0 ; i < n * 2 + 1 ; i ++ ) { string s = \"\" ; string t = i % 2 ? \"|.\" : \"+-\" ; for ( int j = 0 ; j < m * 2 + 1 ; j ++ ) { s += t [ j & 1 ]; } res . push_back ( s ); } res [ 0 ][ 0 ] = res [ 0 ][ 1 ] = res [ 1 ][ 0 ] = res [ 1 ][ 1 ] = '.' ; for ( const auto & s : res ) { cout << s << \" \\n \" ; } } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \\n \" ; run (); } return 0 ; }","title":"Punched Cards"},{"location":"2022/4/google-code-jam/qualification-round-2022/#3d-printing","text":"\u9898\u610f\uff1a \u6709 n n \u53f0\u6253\u5370\u673a\uff0c\u6bcf\u53f0\u6253\u5370\u673a\u9700\u8981 4 4 \u79cd\u58a8\u6c34\uff0c\u7ed9\u51fa\u6bcf\u53f0\u6253\u5370\u673a\u4e2d\u6bcf\u79cd\u58a8\u6c34\u7684\u542b\u91cf\u3002 \u73b0\u5728\u8981\u7528\u6bcf\u4e2a\u6253\u5370\u673a\u5206\u522b\u6253\u5370\u4e00\u4e2a logo\uff0c\u6253\u5370 logo \u9700\u8981 10^6 10^6 \u5355\u4f4d\u7684\u58a8\u6c34\uff0c\u989c\u8272\u4e0d\u9650\uff0c\u4f46\u662f\u6bcf\u79cd\u989c\u8272\u7684\u7528\u91cf\u9700\u8981\u4e00\u81f4\u3002 \u95ee\u6bcf\u79cd\u989c\u8272\u7684\u58a8\u6c34\u7528\u91cf\u662f\u591a\u5c11\uff0c\u80fd\u591f\u6ee1\u8db3\u8981\u6c42\u3002 \u601d\u8def\uff1a \u8d2a\u5fc3\u5373\u53ef\u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void run () { constexpr int Max = 1000000 ; auto vec = vector < vector < int >> ( 4 , vector < int > ( 3 , 0 )); for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { int x ; cin >> x ; vec [ j ][ i ] = x ; } } auto res = vector < int > (); for ( int i = 0 ; i < 4 ; i ++ ) { res . push_back ( * min_element ( all ( vec [ i ]))); } int tot = accumulate ( all ( res ), 0 ); if ( tot < Max ) { cout << \"IMPOSSIBLE \\n \" ; return ; } for ( int i = 0 ; i < 4 ; i ++ ) { if ( tot > Max ) { if ( res [ i ] <= tot - Max ) { tot -= res [ i ]; res [ i ] = 0 ; } else { res [ i ] -= tot - Max ; tot = Max ; } } cout << res [ i ] << \" \\n \" [ i == 3 ]; } } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; }","title":"3D Printing"},{"location":"2022/4/google-code-jam/qualification-round-2022/#d1000000","text":"\u9898\u610f\uff1a \u6709 n n \u4e2a\u9ab0\u5b50\uff0c\u7b2c i i \u4e2a\u9ab0\u5b50\u662f a_i a_i \u7ef4\u7684\uff0c\u5373\u542b\u6709\u6570\u5b57 [1, a_i] [1, a_i] \u3002 \u73b0\u5728\u76ee\u6807\u662f\u8981\u5c06\u4e00\u90e8\u5206\u9ab0\u5b50\u8fde\u8d77\u6765\uff0c\u5e76\u4e14\u6bcf\u4e2a\u9ab0\u5b50\u5411\u4e0a\u7684\u90a3\u4e00\u9762\u7684\u6570\u5b57\u662f\u4e2a\u987a\u5b50\uff0c\u4f46\u662f\u4e0d\u8981\u6c42\u4ece 1 1 \u5f00\u59cb\u3002 \u601d\u8def\uff1a \u8d2a\u5fc3 \u5148\u4e0d\u65ad\u5f80\u53f3\u8fb9\u6269 \u53f3\u8fb9\u6269\u4e0d\u4e86\u4e86\u518d\u5f80\u5de6\u8fb9\u6269 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void run () { int n ; cin >> n ; auto vec = vector < int > ( n , 0 ); for ( int i = 0 ; i < n ; i ++ ) { int x ; cin >> x ; vec [ i ] = x ; } sort ( all ( vec )); int l = vec [ 0 ], r = vec [ 0 ]; for ( int i = 1 ; i < n ; i ++ ) { if ( vec [ i ] > r ) { ++ r ; } else if ( l > 1 ) { -- l ; } } cout << r - l + 1 << \" \\n \" ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; }","title":"d1000000"},{"location":"2022/4/google-code-jam/qualification-round-2022/#chain-reactions","text":"\u9898\u610f\uff1a \u6709 n n \u4e2a\u53cd\u5e94\u5806\uff0c\u6bcf\u4e2a\u53cd\u5e94\u5806\u7684 fun \u503c\u4e3a F_i F_i \u3002 \u90e8\u5206\u53cd\u5e94\u5806\u80fd\u8fde\u8d77\u6765\uff0c\u53d1\u751f\u8fde\u9501\u53cd\u5e94\u3002 \u8fde\u9501\u53cd\u5e94\u4ea7\u751f\u7684 fun \u503c\u662f\u53d1\u751f\u53cd\u5e94\u7684\u53cd\u5e94\u5806\u96c6\u5408\u4e2d\u7684 fun \u503c\u7684\u6700\u5927\u503c\u3002 \u4f46\u662f\u4e00\u4e2a\u53cd\u5e94\u5806\u53ea\u80fd\u53d1\u751f\u4e00\u6b21\u53cd\u5e94\uff0c\u5982\u679c\u88ab\u8fde\u9501\u53cd\u5e94\u591a\u6b21\u89e6\u53d1\uff0c\u5728\u7b2c\u4e8c\u6b21\u53ca\u540e\u7eed\u4e2d\u88ab\u89e6\u53d1\u65f6\u5b83\u4e0d\u4f1a\u53d1\u751f\u53cd\u5e94\u3002 \u8fde\u9501\u53cd\u5e94\u7684\u5173\u7cfb\u662f\u4e00\u4e2a\u6811\uff0c\u4e0d\u662f\u56fe\u3002 \u73b0\u5728\u80fd\u624b\u52a8\u89e6\u53d1\u67d0\u4e2a\u53cd\u5e94\u5806\uff0c\u4f7f\u5176\u53d1\u751f\u53cd\u5e94\uff0c\u5982\u679c\u8be5\u53cd\u5e94\u5806\u540e\u7eed\u8fde\u7740\u53e6\u5916\u7684\u53cd\u5e94\u5806\uff0c\u90a3\u4e48\u5c31\u4f1a\u53d1\u751f\u8fde\u9501\u53cd\u5e94\u3002 \u95ee\u4ee5\u6700\u4f18\u7684\u65b9\u6848\u53bb\u624b\u52a8\u89e6\u53d1\u53cd\u5e94\u5806\uff0c\u80fd\u83b7\u5f97\u7684\u6700\u5927 fun \u503c\u4e4b\u548c\u662f\u591a\u5c11\uff1f \u601d\u8def\uff1a \u8003\u8651\u6811\u5f62 dp\u3002 \u6bcf\u6b21\u5c06\u6700\u5c0f\u7684 fun \u503c\u5f80\u7236\u4eb2\u5408\u5e76\u3002 \u5176\u5b83\u513f\u5b50\u7684\u503c\u76f4\u63a5\u52a0\u5230\u7b54\u6848\u4e2d\u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head const int N = 1e5 + 10 ; int n , a [ N ], f [ N ]; vector < vector < int >> G ; ll res ; ll dfs ( int rt ) { if ( G [ rt ]. empty ()) { return a [ rt ]; } vector < int > f ; for ( const auto & son : G [ rt ]) { f . push_back ( dfs ( son )); } sort ( all ( f )); res += accumulate ( all ( f ), 0l l ) - f [ 0 ]; return max ( a [ rt ], f [ 0 ]); } void run () { cin >> n ; G . clear (); G . resize ( n + 1 ); res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; auto rts = vector < int > (); for ( int i = 1 ; i <= n ; i ++ ) { cin >> f [ i ]; if ( f [ i ]) { G [ f [ i ]]. push_back ( i ); } else { rts . push_back ( i ); } } for ( const auto & rt : rts ) { res += dfs ( rt ); } cout << res << \" \\n \" ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; }","title":"Chain Reactions"},{"location":"2022/4/google-code-jam/qualification-round-2022/#twisty-little-passages","text":"\u7559\u5751\u3002","title":"Twisty Little Passages"},{"location":"2022/4/google-code-jam/round-1a-2022/","text":"Google Code Jam Round 1A 2022 Tutorial Contents Info Problems Double or One Thing Equal Sum Weightlifting Info Practice Link Code Repo Link Video: BiliBili , Youtube Score: 69 Rank: 734 Problems Double or One Thing \u9898\u610f\uff1a \u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \uff0c\u957f\u5ea6\u4e3a n n \uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u590d\u5236\u4e00\u4e2a\u5e76\u4e14\u8ffd\u52a0\u5728\u5176\u4e4b\u540e\u3002 \u90a3\u4e48\u4e00\u5171\u6709 2^n 2^n \u79cd\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\u3002 \u6bd4\u5982\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u5c31\u662f\u5c06\u9ad8\u4eae\u5904\u7684\u5b57\u7b26\u590d\u5236\u4e86\u4e00\u4efd\u7684\u7ed3\u679c\u3002 \u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u3002 \u601d\u8def\uff1a \u5bf9\u4e8e\u5c0f case\uff0c n n \u6700\u5927\u53ea\u6709 10 10 \uff0c\u53ef\u4ee5\u6784\u9020\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u6392\u5e8f\uff0c\u53d6\u7b2c\u4e00\u4e2a\u5373\u53ef\u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void dfs ( int ix , const string & s , string & t , vector < string > & v ) { if ( ix == s . length ()) { v . push_back ( t ); return ; } t += s [ ix ]; dfs ( ix + 1 , s , t , v ); t += s [ ix ]; dfs ( ix + 1 , s , t , v ); t . pop_back (); t . pop_back (); } void run () { string s ; cin >> s ; vector < string > vec ; string t = \"\" ; dfs ( 0 , s , t , vec ); sort ( all ( vec )); cout << vec [ 0 ] << endl ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; } \u5bf9\u4e8e\u5927 case\uff1a \u6211\u4eec\u8003\u8651\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 T T \uff0c\u6211\u4eec\u80fd\u4ee5 \\mathcal{O}(n^2) \\mathcal{O}(n^2) \u590d\u6742\u5ea6\u7684 dp \u53bb\u5224\u65ad\u5b83\u80fd\u5426\u901a\u8fc7 S S \u6784\u9020\u51fa\u6765\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u8d2a\u5fc3\u53bb\u6309\u4f4d\u6784\u9020 T T \uff0c\u7136\u540e\u53bb check \u5c31\u884c\u3002 \u5982\u4f55\u5224\u65ad T T \u80fd\u5426\u901a\u8fc7 S S \u6784\u9020\u51fa\u6765\uff1f \u8003\u8651 f_{i, j} f_{i, j} \u8868\u793a S S \u7684\u524d i i \u4f4d\u548c T T \u7684\u524d j j \u4f4d\u662f\u5426\u5339\u914d\u3002 \u8f6c\u79fb\u6709\uff1a \\left. \\begin{array}{l} \\text{$s_i$ = $t_j$ :} & f_{i, j} \\;|\\; f_{i - 1, j - 1}\\\\ \\text{$s_i$ = $t_{j - 1}$ :} & f_{i, j} \\;|\\; f_{i - 1, j - 2} \\end{array} \\right\\} = f_{i, j} \\left. \\begin{array}{l} \\text{$s_i$ = $t_j$ :} & f_{i, j} \\;|\\; f_{i - 1, j - 1}\\\\ \\text{$s_i$ = $t_{j - 1}$ :} & f_{i, j} \\;|\\; f_{i - 1, j - 2} \\end{array} \\right\\} = f_{i, j} Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void run () { string s ; cin >> s ; int n = s . length (); const auto check = [ & ]( const string & t ) -> int { int m = t . length (); auto f = vector < vector < int >> ( n + 1 , vector < int > ( m + 1 , 0 )); f [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( s [ i - 1 ] == t [ j - 1 ]) { f [ i ][ j ] |= f [ i - 1 ][ j - 1 ]; if ( j >= 2 && s [ i - 1 ] == t [ j - 2 ]) { f [ i ][ j ] |= f [ i - 1 ][ j - 2 ]; } } } } if ( f [ n ][ m ]) { return 2 ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( f [ i ][ m ]) { return 1 ; } } return 0 ; }; string t = \"\" ; for ( int i = 1 ; i <= n * 2 ; i ++ ) { for ( int j = 'A' ; j <= 'Z' ; j ++ ) { t += j ; int check_code = check ( t ); if ( check_code == 0 ) { t . pop_back (); continue ; } if ( check_code == 2 ) { cout << t << endl ; return ; } break ; } } } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; } Equal Sum \u9898\u610f\uff1a \u4ea4\u4e92\u9898\u3002 n = 100 n = 100 \u3002 \u4f60\u5148\u7ed9\u51fa n n \u4e2a\u4e92\u4e0d\u76f8\u540c\u6570\uff0c\u7136\u540e jury \u7ed9\u51fa n n \u4e2a\u4e92\u4e0d\u76f8\u540c\uff08\u5e76\u4e14\u4e0e\u4f60\u7684 n n \u4e2a\u6570\u4e5f\u4e92\u4e0d\u76f8\u540c\uff09\u6570\u3002 \u4f60\u9700\u8981\u5c06\u6570\u5206\u6210\u4e24\u5806\uff0c\u8981\u6c42\u4e24\u5806\u6570\u7684\u548c\u76f8\u7b49\u3002 \u7ed9\u51fa\u7684\u6570\u7684\u8303\u56f4\u662f [1, 10^9] [1, 10^9] \u3002 \u601d\u8def\uff1a \u8003\u8651\u5c06 10^9 10^9 \u4ee5\u4e0b\u7684 2 2 \u7684\u5e42\u6b21\u7684\u6570\u90fd\u7ed9\u51fa\u6765\u3002 \u90a3\u4e48\u8fd9\u5c31\u5df2\u7ecf\u53ef\u4ee5\u6784\u9020\u51fa 10^9 10^9 \u4ee5\u4e0b\u7684\u4efb\u4f55\u6570\u4e86\u3002 \u4e4b\u540e\u5c06 jury \u7ed9\u51fa\u7684 n n \u4e2a\u6570\u653e\u5728\u4e00\u8d77\u6392\u5e8f\uff0c\u5148\u7ed9\u51fa\u5927\u7684\u6570\uff0c\u76f4\u5230\u5269\u4f59\u7684\u6570\u5c0f\u4e8e 10^9 10^9 \uff0c\u7136\u540e\u7528 2 2 \u7684\u5e42\u6b21\u53bb\u6784\u9020\u8fd9\u4e2a\u6570\u5b57\u3002 \u6ce8\u610f\u7ed9\u51fa\u5927\u7684\u6570\u7684\u8fc7\u7a0b\u4e2d\u8981\u5254\u9664\u6389 2 2 \u7684\u5e42\u6b21\u7684\u6570\u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void run () { int n ; cin >> n ; vector < int > f ; for ( int i = 0 ; i < 30 ; i ++ ) { f . push_back ( 1 << i ); } int ix = 1000000001 ; while ( f . size () < n ) { -- ix ; if (( ix & ( ix - 1 )) == 0 ) { continue ; } f . push_back ( ix ); } for ( int i = 0 ; i < n ; i ++ ) { cout << f [ i ]; if ( i == n - 1 ) { cout << endl ; } else { cout << \" \" ; } } cout << flush ; ll sum = accumulate ( all ( f ), 0l l ); for ( int i = 0 ; i < n ; i ++ ) { int x ; cin >> x ; f . push_back ( x ); sum += x ; } assert ( sum % 2 == 0 ); ll tar = sum / 2 ; sort ( all ( f ), greater < int > ()); auto res = vector < int > (); for ( const auto & a : f ) { if (( a & ( a - 1 )) == 0 ) { continue ; } if ( tar < ( 1 << 30 )) { break ; } tar -= a ; res . push_back ( a ); } for ( int i = 0 ; i < 30 ; i ++ ) { if (( tar >> i ) & 1 ) { res . push_back ( 1 << i ); } } for ( int i = 0 ; i < res . size (); i ++ ) { cout << res [ i ]; if ( i == res . size () - 1 ) { cout << endl ; } else { cout << \" \" ; } } cout << flush ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { run (); } return 0 ; } Weightlifting \u9898\u610f\uff1a \u4f60\u662f\u4e00\u4e2a\u4e3e\u91cd\u8fd0\u52a8\u5458\uff0c\u4f60\u7684\u8bad\u7ec3\u76ee\u6807\u662f\u6bcf\u6b21\u5c06\u4e0d\u540c\u91cd\u91cf\u7684\u5706\u76d8\u7ec4\u5408\u5957\u5728\u68cd\u5b50\u91cc\u3002 \u8fd9\u4e2a\u68cd\u5b50\u53ef\u4ee5\u89c6\u4e3a\u4e00\u4e2a\u6808\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u7684\u8bad\u7ec3\u8ba1\u5212\u6709 E E \u4e2a\u6b65\u9aa4\u3002 \u6bcf\u4e2a\u6b65\u9aa4\u4e2d\u8981\u6c42\u8fd9\u4e2a\u68cd\u5b50\u91cc\u5957\u7740\u7684\u5706\u76d8\u7ec4\u5408\u7b26\u5408\u8bad\u7ec3\u8ba1\u5212\u7684\u8981\u6c42\u3002 \u4f60\u53ef\u4ee5\u505a\u7684\u64cd\u4f5c\u662f\u5f80\u68cd\u5b50\u4e0a\u52a0\u4e00\u4e2a\u5706\u76d8\u6216\u8005\u62ff\u6389\u4e00\u4e2a\u5706\u76d8\u3002 \u6ce8\u610f\uff0c\u6700\u540e\u8981\u6c42\u68cd\u5b50\u4e0a\u6ca1\u6709\u5706\u76d8\u3002 \u6c42\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\u3002 \u601d\u8def\uff1a \u9488\u5bf9\u5c0f case\uff1a \u7ef4\u62a4\u6808\u4e2d\u7684\u987a\u5e8f\uff0c next_permutation \u8f6c\u79fb\uff0c \\displaystyle ((\\frac{9!}{3!})^3)^2 \\times 9 \\times 3 \\displaystyle ((\\frac{9!}{3!})^3)^2 \\times 9 \\times 3 \u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head const int INF = 0x3f3f3f3f ; // int sol1(int E, int W, vector<vector<int>> &vec) { // int pre = 0; // vec.push_back({0, 0}); // int res = 0; // for (int i = 1; i <= E + 1; i++) { // res += abs(pre - vec[i][1]); // pre = vec[i][1]; // } // return res; // } struct node { vector < int > a ; int v ; int calc ( const node & pre ) { int i = 0 ; while ( i < a . size () && i < pre . a . size ()) { if ( a [ i ] != pre . a [ i ]) { break ; } ++ i ; } return pre . a . size () - i + a . size () - i ; } bool operator < ( const node & other ) const { return v < other . v ; } }; void run () { int E , W ; cin >> E >> W ; auto vec = vector < vector < int >> ( E + 1 , vector < int > ( W + 1 , 0 )); for ( int i = 1 ; i <= E ; i ++ ) { for ( int j = 1 ; j <= W ; j ++ ) { int x ; cin >> x ; vec [ i ][ j ] = x ; } } // if (W == 1) { // cout << sol1(E, W, vec) << endl; // return; // } auto f = vector < vector < node >> ( E + 1 , vector < node > ()); f [ 0 ]. push_back ( node {. a = {}, . v = 0 }); for ( int i = 1 ; i <= E ; i ++ ) { auto t = vector < int > (); for ( int j = 1 ; j <= W ; j ++ ) { int cnt = vec [ i ][ j ]; if ( cnt == 0 ) { continue ; } auto tt = vector < int > ( cnt , j ); t . insert ( t . end (), all ( tt )); } // for (int o = 0; o < t.size(); o++) { // cout << t[o] << \" \"; // } // cout << endl; do { auto now = node (); now . a = t ; now . v = INF ; for ( const auto & _f : f [ i - 1 ]) { now . v = min ( now . v , _f . v + now . calc ( _f )); } f [ i ]. push_back ( now ); } while ( next_permutation ( all ( t ))); } int res = INF ; for ( const auto & _f : f [ E ]) { res = min ( res , int ( _f . v + _f . a . size ())); } cout << res << endl ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; }","title":"Google Code Jam Round 1A 2022 Tutorial"},{"location":"2022/4/google-code-jam/round-1a-2022/#info","text":"Practice Link Code Repo Link Video: BiliBili , Youtube Score: 69 Rank: 734","title":"Info"},{"location":"2022/4/google-code-jam/round-1a-2022/#problems","text":"","title":"Problems"},{"location":"2022/4/google-code-jam/round-1a-2022/#double-or-one-thing","text":"\u9898\u610f\uff1a \u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32 S S \uff0c\u957f\u5ea6\u4e3a n n \uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u590d\u5236\u4e00\u4e2a\u5e76\u4e14\u8ffd\u52a0\u5728\u5176\u4e4b\u540e\u3002 \u90a3\u4e48\u4e00\u5171\u6709 2^n 2^n \u79cd\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\u3002 \u6bd4\u5982\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u5c31\u662f\u5c06\u9ad8\u4eae\u5904\u7684\u5b57\u7b26\u590d\u5236\u4e86\u4e00\u4efd\u7684\u7ed3\u679c\u3002 \u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u3002 \u601d\u8def\uff1a \u5bf9\u4e8e\u5c0f case\uff0c n n \u6700\u5927\u53ea\u6709 10 10 \uff0c\u53ef\u4ee5\u6784\u9020\u51fa\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u6392\u5e8f\uff0c\u53d6\u7b2c\u4e00\u4e2a\u5373\u53ef\u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void dfs ( int ix , const string & s , string & t , vector < string > & v ) { if ( ix == s . length ()) { v . push_back ( t ); return ; } t += s [ ix ]; dfs ( ix + 1 , s , t , v ); t += s [ ix ]; dfs ( ix + 1 , s , t , v ); t . pop_back (); t . pop_back (); } void run () { string s ; cin >> s ; vector < string > vec ; string t = \"\" ; dfs ( 0 , s , t , vec ); sort ( all ( vec )); cout << vec [ 0 ] << endl ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; } \u5bf9\u4e8e\u5927 case\uff1a \u6211\u4eec\u8003\u8651\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 T T \uff0c\u6211\u4eec\u80fd\u4ee5 \\mathcal{O}(n^2) \\mathcal{O}(n^2) \u590d\u6742\u5ea6\u7684 dp \u53bb\u5224\u65ad\u5b83\u80fd\u5426\u901a\u8fc7 S S \u6784\u9020\u51fa\u6765\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u8d2a\u5fc3\u53bb\u6309\u4f4d\u6784\u9020 T T \uff0c\u7136\u540e\u53bb check \u5c31\u884c\u3002 \u5982\u4f55\u5224\u65ad T T \u80fd\u5426\u901a\u8fc7 S S \u6784\u9020\u51fa\u6765\uff1f \u8003\u8651 f_{i, j} f_{i, j} \u8868\u793a S S \u7684\u524d i i \u4f4d\u548c T T \u7684\u524d j j \u4f4d\u662f\u5426\u5339\u914d\u3002 \u8f6c\u79fb\u6709\uff1a \\left. \\begin{array}{l} \\text{$s_i$ = $t_j$ :} & f_{i, j} \\;|\\; f_{i - 1, j - 1}\\\\ \\text{$s_i$ = $t_{j - 1}$ :} & f_{i, j} \\;|\\; f_{i - 1, j - 2} \\end{array} \\right\\} = f_{i, j} \\left. \\begin{array}{l} \\text{$s_i$ = $t_j$ :} & f_{i, j} \\;|\\; f_{i - 1, j - 1}\\\\ \\text{$s_i$ = $t_{j - 1}$ :} & f_{i, j} \\;|\\; f_{i - 1, j - 2} \\end{array} \\right\\} = f_{i, j} Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void run () { string s ; cin >> s ; int n = s . length (); const auto check = [ & ]( const string & t ) -> int { int m = t . length (); auto f = vector < vector < int >> ( n + 1 , vector < int > ( m + 1 , 0 )); f [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( s [ i - 1 ] == t [ j - 1 ]) { f [ i ][ j ] |= f [ i - 1 ][ j - 1 ]; if ( j >= 2 && s [ i - 1 ] == t [ j - 2 ]) { f [ i ][ j ] |= f [ i - 1 ][ j - 2 ]; } } } } if ( f [ n ][ m ]) { return 2 ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( f [ i ][ m ]) { return 1 ; } } return 0 ; }; string t = \"\" ; for ( int i = 1 ; i <= n * 2 ; i ++ ) { for ( int j = 'A' ; j <= 'Z' ; j ++ ) { t += j ; int check_code = check ( t ); if ( check_code == 0 ) { t . pop_back (); continue ; } if ( check_code == 2 ) { cout << t << endl ; return ; } break ; } } } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; }","title":"Double or One Thing"},{"location":"2022/4/google-code-jam/round-1a-2022/#equal-sum","text":"\u9898\u610f\uff1a \u4ea4\u4e92\u9898\u3002 n = 100 n = 100 \u3002 \u4f60\u5148\u7ed9\u51fa n n \u4e2a\u4e92\u4e0d\u76f8\u540c\u6570\uff0c\u7136\u540e jury \u7ed9\u51fa n n \u4e2a\u4e92\u4e0d\u76f8\u540c\uff08\u5e76\u4e14\u4e0e\u4f60\u7684 n n \u4e2a\u6570\u4e5f\u4e92\u4e0d\u76f8\u540c\uff09\u6570\u3002 \u4f60\u9700\u8981\u5c06\u6570\u5206\u6210\u4e24\u5806\uff0c\u8981\u6c42\u4e24\u5806\u6570\u7684\u548c\u76f8\u7b49\u3002 \u7ed9\u51fa\u7684\u6570\u7684\u8303\u56f4\u662f [1, 10^9] [1, 10^9] \u3002 \u601d\u8def\uff1a \u8003\u8651\u5c06 10^9 10^9 \u4ee5\u4e0b\u7684 2 2 \u7684\u5e42\u6b21\u7684\u6570\u90fd\u7ed9\u51fa\u6765\u3002 \u90a3\u4e48\u8fd9\u5c31\u5df2\u7ecf\u53ef\u4ee5\u6784\u9020\u51fa 10^9 10^9 \u4ee5\u4e0b\u7684\u4efb\u4f55\u6570\u4e86\u3002 \u4e4b\u540e\u5c06 jury \u7ed9\u51fa\u7684 n n \u4e2a\u6570\u653e\u5728\u4e00\u8d77\u6392\u5e8f\uff0c\u5148\u7ed9\u51fa\u5927\u7684\u6570\uff0c\u76f4\u5230\u5269\u4f59\u7684\u6570\u5c0f\u4e8e 10^9 10^9 \uff0c\u7136\u540e\u7528 2 2 \u7684\u5e42\u6b21\u53bb\u6784\u9020\u8fd9\u4e2a\u6570\u5b57\u3002 \u6ce8\u610f\u7ed9\u51fa\u5927\u7684\u6570\u7684\u8fc7\u7a0b\u4e2d\u8981\u5254\u9664\u6389 2 2 \u7684\u5e42\u6b21\u7684\u6570\u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head void run () { int n ; cin >> n ; vector < int > f ; for ( int i = 0 ; i < 30 ; i ++ ) { f . push_back ( 1 << i ); } int ix = 1000000001 ; while ( f . size () < n ) { -- ix ; if (( ix & ( ix - 1 )) == 0 ) { continue ; } f . push_back ( ix ); } for ( int i = 0 ; i < n ; i ++ ) { cout << f [ i ]; if ( i == n - 1 ) { cout << endl ; } else { cout << \" \" ; } } cout << flush ; ll sum = accumulate ( all ( f ), 0l l ); for ( int i = 0 ; i < n ; i ++ ) { int x ; cin >> x ; f . push_back ( x ); sum += x ; } assert ( sum % 2 == 0 ); ll tar = sum / 2 ; sort ( all ( f ), greater < int > ()); auto res = vector < int > (); for ( const auto & a : f ) { if (( a & ( a - 1 )) == 0 ) { continue ; } if ( tar < ( 1 << 30 )) { break ; } tar -= a ; res . push_back ( a ); } for ( int i = 0 ; i < 30 ; i ++ ) { if (( tar >> i ) & 1 ) { res . push_back ( 1 << i ); } } for ( int i = 0 ; i < res . size (); i ++ ) { cout << res [ i ]; if ( i == res . size () - 1 ) { cout << endl ; } else { cout << \" \" ; } } cout << flush ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { run (); } return 0 ; }","title":"Equal Sum"},{"location":"2022/4/google-code-jam/round-1a-2022/#weightlifting","text":"\u9898\u610f\uff1a \u4f60\u662f\u4e00\u4e2a\u4e3e\u91cd\u8fd0\u52a8\u5458\uff0c\u4f60\u7684\u8bad\u7ec3\u76ee\u6807\u662f\u6bcf\u6b21\u5c06\u4e0d\u540c\u91cd\u91cf\u7684\u5706\u76d8\u7ec4\u5408\u5957\u5728\u68cd\u5b50\u91cc\u3002 \u8fd9\u4e2a\u68cd\u5b50\u53ef\u4ee5\u89c6\u4e3a\u4e00\u4e2a\u6808\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u7684\u8bad\u7ec3\u8ba1\u5212\u6709 E E \u4e2a\u6b65\u9aa4\u3002 \u6bcf\u4e2a\u6b65\u9aa4\u4e2d\u8981\u6c42\u8fd9\u4e2a\u68cd\u5b50\u91cc\u5957\u7740\u7684\u5706\u76d8\u7ec4\u5408\u7b26\u5408\u8bad\u7ec3\u8ba1\u5212\u7684\u8981\u6c42\u3002 \u4f60\u53ef\u4ee5\u505a\u7684\u64cd\u4f5c\u662f\u5f80\u68cd\u5b50\u4e0a\u52a0\u4e00\u4e2a\u5706\u76d8\u6216\u8005\u62ff\u6389\u4e00\u4e2a\u5706\u76d8\u3002 \u6ce8\u610f\uff0c\u6700\u540e\u8981\u6c42\u68cd\u5b50\u4e0a\u6ca1\u6709\u5706\u76d8\u3002 \u6c42\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\u3002 \u601d\u8def\uff1a \u9488\u5bf9\u5c0f case\uff1a \u7ef4\u62a4\u6808\u4e2d\u7684\u987a\u5e8f\uff0c next_permutation \u8f6c\u79fb\uff0c \\displaystyle ((\\frac{9!}{3!})^3)^2 \\times 9 \\times 3 \\displaystyle ((\\frac{9!}{3!})^3)^2 \\times 9 \\times 3 \u3002 Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; const ll mod = 1e9 + 7 ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } #ifdef LOCAL #include <debug.hpp> #else #define dbg(...) #endif // head const int INF = 0x3f3f3f3f ; // int sol1(int E, int W, vector<vector<int>> &vec) { // int pre = 0; // vec.push_back({0, 0}); // int res = 0; // for (int i = 1; i <= E + 1; i++) { // res += abs(pre - vec[i][1]); // pre = vec[i][1]; // } // return res; // } struct node { vector < int > a ; int v ; int calc ( const node & pre ) { int i = 0 ; while ( i < a . size () && i < pre . a . size ()) { if ( a [ i ] != pre . a [ i ]) { break ; } ++ i ; } return pre . a . size () - i + a . size () - i ; } bool operator < ( const node & other ) const { return v < other . v ; } }; void run () { int E , W ; cin >> E >> W ; auto vec = vector < vector < int >> ( E + 1 , vector < int > ( W + 1 , 0 )); for ( int i = 1 ; i <= E ; i ++ ) { for ( int j = 1 ; j <= W ; j ++ ) { int x ; cin >> x ; vec [ i ][ j ] = x ; } } // if (W == 1) { // cout << sol1(E, W, vec) << endl; // return; // } auto f = vector < vector < node >> ( E + 1 , vector < node > ()); f [ 0 ]. push_back ( node {. a = {}, . v = 0 }); for ( int i = 1 ; i <= E ; i ++ ) { auto t = vector < int > (); for ( int j = 1 ; j <= W ; j ++ ) { int cnt = vec [ i ][ j ]; if ( cnt == 0 ) { continue ; } auto tt = vector < int > ( cnt , j ); t . insert ( t . end (), all ( tt )); } // for (int o = 0; o < t.size(); o++) { // cout << t[o] << \" \"; // } // cout << endl; do { auto now = node (); now . a = t ; now . v = INF ; for ( const auto & _f : f [ i - 1 ]) { now . v = min ( now . v , _f . v + now . calc ( _f )); } f [ i ]. push_back ( now ); } while ( next_permutation ( all ( t ))); } int res = INF ; for ( const auto & _f : f [ E ]) { res = min ( res , int ( _f . v + _f . a . size ())); } cout << res << endl ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; }","title":"Weightlifting"},{"location":"2022/4/something-about-crtp/","text":"Something About Curiously Recurring Template Pattern(CRTP) Contents Intro General Form Dynamic polymorphism Static polymorphism Static polymorphism combined with dynamic polymorphism Object counter Polymorphic chaining Polymorphic copy construction Reference Intro \u5947\u5f02\u9012\u5f52\u6a21\u677f\u6a21\u5f0f\uff08curiously recurring template pattern\uff0c CRTP \uff09\uff0c\u662f C++ \u6a21\u677f\u7f16\u7a0b\u65f6\u7684\u4e00\u79cd\u60ef\u7528\u6cd5\uff0c\u5373\u5c06\u6d3e\u751f\u7c7b\u4f5c\u4e3a\u57fa\u7c7b\u7684\u6a21\u677f\u53c2\u6570\u3002 \u672c\u6587\u6240\u6d89\u53ca\u7684\u4ee3\u7801\u793a\u4f8b\u5730\u5740\uff1a Dup4/learning-cpp General Form // The Curiously Recurring Template Pattern (CRTP) template < class T > class Base { // methods within Base can use template to access members of Derived }; class Derived : public Base < Derived > { // ... }; CRTP \u7684\u8d77\u624b\u5f0f\u4e00\u822c\u5982\u4e0a\u6240\u793a\u3002 \u4e0b\u9762\u4f1a\u4ecb\u7ecd\u4e00\u4e9b CRTP \u7684\u7528\u4f8b\uff0c\u6bd4\u5982\u9759\u6001\u591a\u6001\u3002 Dynamic polymorphism \u4e3a\u4e86\u66f4\u597d\u7684\u4ecb\u7ecd CRTP\uff0c\u6211\u4eec\u5148\u56de\u987e\u4e00\u4e0b\u4f7f\u7528\u865a\u51fd\u6570\u5b9e\u73b0\u52a8\u6001\u591a\u6001\u7684\u57fa\u672c\u5199\u6cd5\u3002 #include <iostream> using namespace std ; class Base { public : virtual void Show () const { cout << \"Base\" << endl ; } }; class Derived : public Base { public : void Show () const override { Base :: Show (); cout << \"Derived\" << endl ; } }; void f ( const Base & base ) { base . Show (); } int main () { auto d = Derived (); d . Show (); f ( d ); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a Base Derived Base Derived \u4e00\u822c\u4f7f\u7528 virtual \u5173\u952e\u5b57\u6765\u5728\u57fa\u7c7b\u58f0\u660e\u4e00\u4e2a\u865a\u51fd\u6570\uff0c\u5728\u5b50\u7c7b\u4e2d\u53bb override \u5b83\uff0c\u5728\u8fd0\u884c\u65f6\uff0c\u901a\u8fc7\u865a\u8868\u627e\u5230\u6307\u5b9a\u7684\u51fd\u6570\u53bb\u6267\u884c\uff0c\u8fd9\u6837\u4f1a\u5b58\u5728\u8fd0\u884c\u65f6\u7684\u5f00\u9500\u3002 \u800c\u4e14\u6d3e\u751f\u7c7b\u7684 override \u662f\u8986\u5199\uff0c\u5982\u679c\u60f3\u8c03\u7528\u57fa\u7c7b\u539f\u672c\u7684 Show \u51fd\u6570\uff0c\u8fd8\u5f97\u5728\u6d3e\u751f\u7c7b\u4e2d\u8c03\u7528\u4e00\u4e0b\uff0c\u8fd9\u65f6\u53ef\u4ee5\u8ba4\u4e3a \u4e3b\u52a8\u6743 \u638c\u63e1\u5728\u6d3e\u751f\u7c7b\u624b\u4e0a\u3002 Static polymorphism \u6211\u4eec\u53ef\u4ee5\u5229\u7528 CRTP \u6765\u5b9e\u73b0\u9759\u6001\u591a\u6001\u3002 #include <iostream> using namespace std ; template < typename T > class Base { public : void Show () const { cout << \"Base\" << endl ; static_cast < const T &> ( * this ). Show (); } }; class Derived : public Base < Derived > { public : void Show () const { cout << \"Derived\" << endl ; } }; template < typename T > void f ( const Base < T >& base ) { base . Show (); } int main () { auto d = Derived (); d . Show (); f ( d ); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a Derived Base Derived \u7531\u4e8e\u57fa\u7c7b\u80fd\u591f\u5728\u7f16\u8bd1\u671f\u77e5\u9053\u6d3e\u751f\u7c7b\u7684\u7c7b\u578b\uff0c\u90a3\u4e48\u901a\u8fc7 static_cast \u5c31\u53ef\u4ee5\u5c06\u81ea\u5df1\u8f6c\u6362\u6210\u6d3e\u751f\u7c7b\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u51fd\u6570\u3002 \u8fd9\u65f6\u53ef\u4ee5\u53d1\u73b0\uff0c\u8c03\u7528 Show \u51fd\u6570\u7684\u5165\u53e3\uff0c\u5176\u5b9e\u662f\u57fa\u7c7b\u4e2d\u7684 Show \uff0c\u591a\u6001\u7684\u884c\u4e3a\u662f\u57fa\u7c7b\u4e2d Show \u51fd\u6570\u8fdb\u884c\u63a7\u5236\u7684\u3002 \u53ef\u4ee5\u8ba4\u4e3a \u4e3b\u52a8\u6743 \u638c\u63e1\u5728\u57fa\u7c7b\u624b\u4e0a\u3002 \u60f3\u8981\u5b9e\u73b0\u591a\u6001\u4e5f\u80fd\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u51fd\u6570\u4e2d\u58f0\u660e\u57fa\u7c7b\u7c7b\u578b\u65f6\u4f7f\u7528\u6a21\u677f\u5373\u53ef\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f20\u5165\u4e0d\u540c\u7684\u6d3e\u751f\u7c7b\u7c7b\u578b\uff0c\u6765\u8fbe\u5230\u591a\u6001\u7684\u76ee\u7684\u3002 \u90a3\u5982\u679c\u6211\u4eec\u60f3\u7528\u4e00\u4e2a vector \u6765\u5b58\u4e0d\u540c\u7684\u6d3e\u751f\u7c7b\u5462\uff1f Static polymorphism combined with dynamic polymorphism \u7531\u4e8e vector \u53ea\u80fd\u5b58\u50a8\u540c\u4e00\u7c7b\u578b\uff0c\u5bf9\u4e8e\u52a8\u6001\u591a\u6001\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b58\u50a8\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u5373\u53ef\u5728 vector \u4e2d\u5b58\u50a8\u4e0d\u540c\u6d3e\u751f\u7c7b\u8f6c\u5316\u6210\u7684\u57fa\u7c7b\u6307\u9488\u3002 \u4f46\u662f\u5728 CRTP \u4e2d\u5b9e\u73b0\u7684\u9759\u6001\u591a\u6001\u4e2d\uff0c\u57fa\u7c7b\u662f\u4e2a\u6a21\u677f\u7c7b\uff0c\u597d\u50cf\u5c31\u4e0d\u592a\u53ef\u884c\u4e86\u3002 #include <iostream> #include <vector> using namespace std ; class Base { public : virtual ~ Base () {} virtual void Show () const = 0 ; }; template < typename T > class BaseCRTP : public Base { public : void Show () const override final { showImpl (); static_cast < const T &> ( * this ). showImpl (); } private : void showImpl () const { cout << \"Base\" << endl ; } }; class Derived : public BaseCRTP < Derived > { friend class BaseCRTP < Derived > ; private : void showImpl () const { cout << \"Derived\" << endl ; } }; void f ( const Base & b ) { b . Show (); } int main () { Derived d ; d . Show (); f ( d ); vector < Base *> v ; v . push_back ( & d ); v [ 0 ] -> Show (); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a Base Derived Base Derived Base Derived \u4e00\u4e2a\u53ef\u884c\u7684\u65b9\u6cd5\u662f\uff0c \u52a8\u9759\u7ed3\u5408 \u3002 \u5373\u5728 CRTP \u57fa\u7c7b\u4e4b\u4e0a\uff0c\u518d\u58f0\u660e\u4e00\u4e2a\u57fa\u7c7b\uff0c\u8fd9\u4e24\u4e2a\u7c7b\u578b\u4e4b\u95f4\u7528\u52a8\u6001\u591a\u6001\u3002 \u867d\u7136\u4ecd\u7136\u5b58\u5728\u8fd0\u884c\u65f6\u7684\u5f00\u9500\uff0c\u4f46\u662f\u76f8\u6bd4\u4e8e\u5168\u94fe\u8def\u52a8\u6001\u591a\u6001\uff0c\u8fd9\u79cd \u52a8\u9759\u7ed3\u5408 \u7684\u65b9\u5f0f\uff0c\u5f00\u9500\u8fd8\u662f\u8981\u5c0f\u4e00\u4e9b\u3002 Object counter \u4f7f\u7528 CRTP\uff0c\u6211\u4eec\u80fd\u591f\u8f7b\u6613\u7684\u5b9e\u73b0\u5143\u7d20\u6784\u9020\u7684\u8ba1\u6570\u3002 #include <iostream> using namespace std ; template < typename T > class Counter { public : static inline int objects_created = 0 ; static inline int objects_alive = 0 ; Counter () { ++ objects_created ; ++ objects_alive ; } Counter ( const Counter & ) { ++ objects_created ; ++ objects_alive ; } protected : ~ Counter () { -- objects_alive ; } }; class X : Counter < X > { public : }; class Y : Counter < Y > { public : }; int main () { X x ; Y y ; cout << Counter < X >:: objects_created << endl ; cout << Counter < Y >:: objects_created << endl ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 1 Polymorphic chaining \u8fd9\u4e2a\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u8bf4\uff0c\u5bf9 Class \u4e2d\u7684\u51fd\u6570\u8fdb\u884c\u94fe\u5f0f\u8c03\u7528\u65f6\uff0c\u5982\u679c\u8c03\u7528\u94fe\u4e2d\u65e2\u6709\u57fa\u7c7b\u51fd\u6570\uff08\u672a\u88ab\u6d3e\u751f\u7c7b\u8986\u5199\u7684\u51fd\u6570\uff09\uff0c\u4e5f\u6709\u6d3e\u751f\u7c7b\u51fd\u6570\uff0c\u90a3\u4e48\u8fd9\u4e24\u7c7b\u51fd\u6570\u8fd4\u56de\u7684 this \u662f\u4e0d\u4e00\u6837\u7684\uff0c\u4e00\u65e6\u67d0\u4e2a\u8282\u70b9\u8fd4\u56de\u7684 this \u662f\u57fa\u7c7b\u7c7b\u578b\uff0c\u90a3\u4e48\u5728\u8fd9\u4e2a\u94fe\u5f0f\u8c03\u7528\u7684\u540e\u7eed\uff0c\u5c31\u65e0\u6cd5\u518d\u8c03\u7528\u6d3e\u751f\u7c7b\u7684\u72ec\u6709\u65b9\u6cd5\u3002 \u4f46\u662f CRTP \u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u57fa\u7c7b\u80fd\u591f\u62ff\u5230\u6d3e\u751f\u7c7b\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u5c06 this \u8f6c\u6362\u6210\u6d3e\u751f\u7c7b\u7c7b\u578b\u3002 #include <iostream> using namespace std ; enum class Color { RED = 0 , GREEN = 1 , BLUE = 2 , }; template < typename ConcretePrinter > class Printer { public : Printer ( ostream & pstream ) : m_stream ( pstream ) {} template < typename T > ConcretePrinter & Print ( T && t ) { m_stream << t ; return derived (); } template < typename T > ConcretePrinter & Println ( T && t ) { m_stream << t << endl ; return derived (); } private : ConcretePrinter & derived () { return static_cast < ConcretePrinter &> ( * this ); } ostream & m_stream ; }; class CoutPrinter : public Printer < CoutPrinter > { public : CoutPrinter () : Printer ( cout ) {} CoutPrinter & SetConsoleColor ( Color c ) { color_ = c ; return * this ; } private : Color color_ ; }; int main () { CoutPrinter (). Print ( \"a\" ). SetConsoleColor ( Color :: BLUE ). Println ( \"b\" ); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a ab Polymorphic copy construction \u4f7f\u7528 CRTP \u4e5f\u80fd\u8f7b\u6613\u5b9e\u73b0\u6d3e\u751f\u7c7b\u7684\u6df1\u62f7\u8d1d\uff0c\u800c\u4e0d\u7528\u4e3a\u6bcf\u4e2a\u6d3e\u751f\u7c7b\u90fd\u5b9e\u73b0\u4e00\u904d\u3002 \u5176\u5b9e\u53c2\u8003\u8fd9\u4e2a case\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0cCRTP \u57fa\u4e8e\u6a21\u677f\uff0c\u6709\u6548\u7684\u4f7f\u7528\u5b83\uff0c\u53ef\u4ee5\u6bd4\u52a8\u6001\u591a\u6001\u51cf\u5c11\u66f4\u591a\u7684\u4ee3\u7801\u91cd\u590d\u3002 #include <iostream> #include <memory> using namespace std ; template < typename T > class Base { public : void Show () const { cout << \"Base\" << endl ; derived (). Show (); } std :: unique_ptr < Base > Clone () const { return std :: make_unique < T > ( static_cast < T const &> ( * this )); } protected : const T & derived () const { return static_cast < const T &> ( * this ); } Base () = default ; Base ( const Base & ) = default ; Base ( Base && ) = default ; }; class Derived : public Base < Derived > { public : void Show () const { cout << \"Derived\" << endl ; } }; int main () { auto s = Derived (); s . Show (); auto ss = s . Clone (); ss -> Show (); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a Derived Base Derived Reference https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern http://www.vishalchovatiya.com/crtp-c-examples/","title":"Something About Curiously Recurring Template Pattern(CRTP)"},{"location":"2022/4/something-about-crtp/#intro","text":"\u5947\u5f02\u9012\u5f52\u6a21\u677f\u6a21\u5f0f\uff08curiously recurring template pattern\uff0c CRTP \uff09\uff0c\u662f C++ \u6a21\u677f\u7f16\u7a0b\u65f6\u7684\u4e00\u79cd\u60ef\u7528\u6cd5\uff0c\u5373\u5c06\u6d3e\u751f\u7c7b\u4f5c\u4e3a\u57fa\u7c7b\u7684\u6a21\u677f\u53c2\u6570\u3002 \u672c\u6587\u6240\u6d89\u53ca\u7684\u4ee3\u7801\u793a\u4f8b\u5730\u5740\uff1a Dup4/learning-cpp","title":"Intro"},{"location":"2022/4/something-about-crtp/#general-form","text":"// The Curiously Recurring Template Pattern (CRTP) template < class T > class Base { // methods within Base can use template to access members of Derived }; class Derived : public Base < Derived > { // ... }; CRTP \u7684\u8d77\u624b\u5f0f\u4e00\u822c\u5982\u4e0a\u6240\u793a\u3002 \u4e0b\u9762\u4f1a\u4ecb\u7ecd\u4e00\u4e9b CRTP \u7684\u7528\u4f8b\uff0c\u6bd4\u5982\u9759\u6001\u591a\u6001\u3002","title":"General Form"},{"location":"2022/4/something-about-crtp/#dynamic-polymorphism","text":"\u4e3a\u4e86\u66f4\u597d\u7684\u4ecb\u7ecd CRTP\uff0c\u6211\u4eec\u5148\u56de\u987e\u4e00\u4e0b\u4f7f\u7528\u865a\u51fd\u6570\u5b9e\u73b0\u52a8\u6001\u591a\u6001\u7684\u57fa\u672c\u5199\u6cd5\u3002 #include <iostream> using namespace std ; class Base { public : virtual void Show () const { cout << \"Base\" << endl ; } }; class Derived : public Base { public : void Show () const override { Base :: Show (); cout << \"Derived\" << endl ; } }; void f ( const Base & base ) { base . Show (); } int main () { auto d = Derived (); d . Show (); f ( d ); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a Base Derived Base Derived \u4e00\u822c\u4f7f\u7528 virtual \u5173\u952e\u5b57\u6765\u5728\u57fa\u7c7b\u58f0\u660e\u4e00\u4e2a\u865a\u51fd\u6570\uff0c\u5728\u5b50\u7c7b\u4e2d\u53bb override \u5b83\uff0c\u5728\u8fd0\u884c\u65f6\uff0c\u901a\u8fc7\u865a\u8868\u627e\u5230\u6307\u5b9a\u7684\u51fd\u6570\u53bb\u6267\u884c\uff0c\u8fd9\u6837\u4f1a\u5b58\u5728\u8fd0\u884c\u65f6\u7684\u5f00\u9500\u3002 \u800c\u4e14\u6d3e\u751f\u7c7b\u7684 override \u662f\u8986\u5199\uff0c\u5982\u679c\u60f3\u8c03\u7528\u57fa\u7c7b\u539f\u672c\u7684 Show \u51fd\u6570\uff0c\u8fd8\u5f97\u5728\u6d3e\u751f\u7c7b\u4e2d\u8c03\u7528\u4e00\u4e0b\uff0c\u8fd9\u65f6\u53ef\u4ee5\u8ba4\u4e3a \u4e3b\u52a8\u6743 \u638c\u63e1\u5728\u6d3e\u751f\u7c7b\u624b\u4e0a\u3002","title":"Dynamic polymorphism"},{"location":"2022/4/something-about-crtp/#static-polymorphism","text":"\u6211\u4eec\u53ef\u4ee5\u5229\u7528 CRTP \u6765\u5b9e\u73b0\u9759\u6001\u591a\u6001\u3002 #include <iostream> using namespace std ; template < typename T > class Base { public : void Show () const { cout << \"Base\" << endl ; static_cast < const T &> ( * this ). Show (); } }; class Derived : public Base < Derived > { public : void Show () const { cout << \"Derived\" << endl ; } }; template < typename T > void f ( const Base < T >& base ) { base . Show (); } int main () { auto d = Derived (); d . Show (); f ( d ); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a Derived Base Derived \u7531\u4e8e\u57fa\u7c7b\u80fd\u591f\u5728\u7f16\u8bd1\u671f\u77e5\u9053\u6d3e\u751f\u7c7b\u7684\u7c7b\u578b\uff0c\u90a3\u4e48\u901a\u8fc7 static_cast \u5c31\u53ef\u4ee5\u5c06\u81ea\u5df1\u8f6c\u6362\u6210\u6d3e\u751f\u7c7b\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u51fd\u6570\u3002 \u8fd9\u65f6\u53ef\u4ee5\u53d1\u73b0\uff0c\u8c03\u7528 Show \u51fd\u6570\u7684\u5165\u53e3\uff0c\u5176\u5b9e\u662f\u57fa\u7c7b\u4e2d\u7684 Show \uff0c\u591a\u6001\u7684\u884c\u4e3a\u662f\u57fa\u7c7b\u4e2d Show \u51fd\u6570\u8fdb\u884c\u63a7\u5236\u7684\u3002 \u53ef\u4ee5\u8ba4\u4e3a \u4e3b\u52a8\u6743 \u638c\u63e1\u5728\u57fa\u7c7b\u624b\u4e0a\u3002 \u60f3\u8981\u5b9e\u73b0\u591a\u6001\u4e5f\u80fd\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u51fd\u6570\u4e2d\u58f0\u660e\u57fa\u7c7b\u7c7b\u578b\u65f6\u4f7f\u7528\u6a21\u677f\u5373\u53ef\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f20\u5165\u4e0d\u540c\u7684\u6d3e\u751f\u7c7b\u7c7b\u578b\uff0c\u6765\u8fbe\u5230\u591a\u6001\u7684\u76ee\u7684\u3002 \u90a3\u5982\u679c\u6211\u4eec\u60f3\u7528\u4e00\u4e2a vector \u6765\u5b58\u4e0d\u540c\u7684\u6d3e\u751f\u7c7b\u5462\uff1f","title":"Static polymorphism"},{"location":"2022/4/something-about-crtp/#static-polymorphism-combined-with-dynamic-polymorphism","text":"\u7531\u4e8e vector \u53ea\u80fd\u5b58\u50a8\u540c\u4e00\u7c7b\u578b\uff0c\u5bf9\u4e8e\u52a8\u6001\u591a\u6001\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b58\u50a8\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u5373\u53ef\u5728 vector \u4e2d\u5b58\u50a8\u4e0d\u540c\u6d3e\u751f\u7c7b\u8f6c\u5316\u6210\u7684\u57fa\u7c7b\u6307\u9488\u3002 \u4f46\u662f\u5728 CRTP \u4e2d\u5b9e\u73b0\u7684\u9759\u6001\u591a\u6001\u4e2d\uff0c\u57fa\u7c7b\u662f\u4e2a\u6a21\u677f\u7c7b\uff0c\u597d\u50cf\u5c31\u4e0d\u592a\u53ef\u884c\u4e86\u3002 #include <iostream> #include <vector> using namespace std ; class Base { public : virtual ~ Base () {} virtual void Show () const = 0 ; }; template < typename T > class BaseCRTP : public Base { public : void Show () const override final { showImpl (); static_cast < const T &> ( * this ). showImpl (); } private : void showImpl () const { cout << \"Base\" << endl ; } }; class Derived : public BaseCRTP < Derived > { friend class BaseCRTP < Derived > ; private : void showImpl () const { cout << \"Derived\" << endl ; } }; void f ( const Base & b ) { b . Show (); } int main () { Derived d ; d . Show (); f ( d ); vector < Base *> v ; v . push_back ( & d ); v [ 0 ] -> Show (); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a Base Derived Base Derived Base Derived \u4e00\u4e2a\u53ef\u884c\u7684\u65b9\u6cd5\u662f\uff0c \u52a8\u9759\u7ed3\u5408 \u3002 \u5373\u5728 CRTP \u57fa\u7c7b\u4e4b\u4e0a\uff0c\u518d\u58f0\u660e\u4e00\u4e2a\u57fa\u7c7b\uff0c\u8fd9\u4e24\u4e2a\u7c7b\u578b\u4e4b\u95f4\u7528\u52a8\u6001\u591a\u6001\u3002 \u867d\u7136\u4ecd\u7136\u5b58\u5728\u8fd0\u884c\u65f6\u7684\u5f00\u9500\uff0c\u4f46\u662f\u76f8\u6bd4\u4e8e\u5168\u94fe\u8def\u52a8\u6001\u591a\u6001\uff0c\u8fd9\u79cd \u52a8\u9759\u7ed3\u5408 \u7684\u65b9\u5f0f\uff0c\u5f00\u9500\u8fd8\u662f\u8981\u5c0f\u4e00\u4e9b\u3002","title":"Static polymorphism combined with dynamic polymorphism"},{"location":"2022/4/something-about-crtp/#object-counter","text":"\u4f7f\u7528 CRTP\uff0c\u6211\u4eec\u80fd\u591f\u8f7b\u6613\u7684\u5b9e\u73b0\u5143\u7d20\u6784\u9020\u7684\u8ba1\u6570\u3002 #include <iostream> using namespace std ; template < typename T > class Counter { public : static inline int objects_created = 0 ; static inline int objects_alive = 0 ; Counter () { ++ objects_created ; ++ objects_alive ; } Counter ( const Counter & ) { ++ objects_created ; ++ objects_alive ; } protected : ~ Counter () { -- objects_alive ; } }; class X : Counter < X > { public : }; class Y : Counter < Y > { public : }; int main () { X x ; Y y ; cout << Counter < X >:: objects_created << endl ; cout << Counter < Y >:: objects_created << endl ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 1","title":"Object counter"},{"location":"2022/4/something-about-crtp/#polymorphic-chaining","text":"\u8fd9\u4e2a\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u8bf4\uff0c\u5bf9 Class \u4e2d\u7684\u51fd\u6570\u8fdb\u884c\u94fe\u5f0f\u8c03\u7528\u65f6\uff0c\u5982\u679c\u8c03\u7528\u94fe\u4e2d\u65e2\u6709\u57fa\u7c7b\u51fd\u6570\uff08\u672a\u88ab\u6d3e\u751f\u7c7b\u8986\u5199\u7684\u51fd\u6570\uff09\uff0c\u4e5f\u6709\u6d3e\u751f\u7c7b\u51fd\u6570\uff0c\u90a3\u4e48\u8fd9\u4e24\u7c7b\u51fd\u6570\u8fd4\u56de\u7684 this \u662f\u4e0d\u4e00\u6837\u7684\uff0c\u4e00\u65e6\u67d0\u4e2a\u8282\u70b9\u8fd4\u56de\u7684 this \u662f\u57fa\u7c7b\u7c7b\u578b\uff0c\u90a3\u4e48\u5728\u8fd9\u4e2a\u94fe\u5f0f\u8c03\u7528\u7684\u540e\u7eed\uff0c\u5c31\u65e0\u6cd5\u518d\u8c03\u7528\u6d3e\u751f\u7c7b\u7684\u72ec\u6709\u65b9\u6cd5\u3002 \u4f46\u662f CRTP \u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u57fa\u7c7b\u80fd\u591f\u62ff\u5230\u6d3e\u751f\u7c7b\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u5c06 this \u8f6c\u6362\u6210\u6d3e\u751f\u7c7b\u7c7b\u578b\u3002 #include <iostream> using namespace std ; enum class Color { RED = 0 , GREEN = 1 , BLUE = 2 , }; template < typename ConcretePrinter > class Printer { public : Printer ( ostream & pstream ) : m_stream ( pstream ) {} template < typename T > ConcretePrinter & Print ( T && t ) { m_stream << t ; return derived (); } template < typename T > ConcretePrinter & Println ( T && t ) { m_stream << t << endl ; return derived (); } private : ConcretePrinter & derived () { return static_cast < ConcretePrinter &> ( * this ); } ostream & m_stream ; }; class CoutPrinter : public Printer < CoutPrinter > { public : CoutPrinter () : Printer ( cout ) {} CoutPrinter & SetConsoleColor ( Color c ) { color_ = c ; return * this ; } private : Color color_ ; }; int main () { CoutPrinter (). Print ( \"a\" ). SetConsoleColor ( Color :: BLUE ). Println ( \"b\" ); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a ab","title":"Polymorphic chaining"},{"location":"2022/4/something-about-crtp/#polymorphic-copy-construction","text":"\u4f7f\u7528 CRTP \u4e5f\u80fd\u8f7b\u6613\u5b9e\u73b0\u6d3e\u751f\u7c7b\u7684\u6df1\u62f7\u8d1d\uff0c\u800c\u4e0d\u7528\u4e3a\u6bcf\u4e2a\u6d3e\u751f\u7c7b\u90fd\u5b9e\u73b0\u4e00\u904d\u3002 \u5176\u5b9e\u53c2\u8003\u8fd9\u4e2a case\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0cCRTP \u57fa\u4e8e\u6a21\u677f\uff0c\u6709\u6548\u7684\u4f7f\u7528\u5b83\uff0c\u53ef\u4ee5\u6bd4\u52a8\u6001\u591a\u6001\u51cf\u5c11\u66f4\u591a\u7684\u4ee3\u7801\u91cd\u590d\u3002 #include <iostream> #include <memory> using namespace std ; template < typename T > class Base { public : void Show () const { cout << \"Base\" << endl ; derived (). Show (); } std :: unique_ptr < Base > Clone () const { return std :: make_unique < T > ( static_cast < T const &> ( * this )); } protected : const T & derived () const { return static_cast < const T &> ( * this ); } Base () = default ; Base ( const Base & ) = default ; Base ( Base && ) = default ; }; class Derived : public Base < Derived > { public : void Show () const { cout << \"Derived\" << endl ; } }; int main () { auto s = Derived (); s . Show (); auto ss = s . Clone (); ss -> Show (); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a Derived Base Derived","title":"Polymorphic copy construction"},{"location":"2022/4/something-about-crtp/#reference","text":"https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern http://www.vishalchovatiya.com/crtp-c-examples/","title":"Reference"},{"location":"2022/5/ball-weighing-problem/","text":"\u5c0f\u7403\u79f0\u91cd\u95ee\u9898 \u8fd1\u671f\uff0csyd \u5728\u51c6\u5907\u9762\u8bd5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u95ee\u4e86\u6211\u4e00\u9053\u5c0f\u7403\u79f0\u91cd\u95ee\u9898\u3002 \u6211\u5728\u4e0a\u7f51\u5b66\u4e60\u4e4b\u540e\uff0c\u7b80\u5355\u8bb0\u5f55\u4e00\u4e0b\u6211\u7684\u5b66\u4e60\u8fc7\u7a0b\u3002 \u95ee\u9898 \u7ed9\u51fa 12 12 \u4e2a\u5c0f\u7403\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u7403\u4e0d\u6b63\u5e38\uff0c\u4e0d\u8fc7\u5e76\u4e0d\u77e5\u9053\u90a3\u4e2a\u4e0d\u6b63\u5e38\u7684\u7403\u662f\u504f\u91cd\u7684\u8fd8\u662f\u504f\u8f7b\u7684\u3002 \u73b0\u5728\u6709\u4e00\u4e2a\u5929\u5e73\uff0c\u8981\u6c42\u901a\u8fc7\u81f3\u591a\u4e09\u6b21\u79f0\u91cd\uff0c\u627e\u51fa\u90a3\u4e2a\u4e0d\u6b63\u5e38\u7684\u5c0f\u7403\u3002 \u89e3\u6cd5 \u9996\u5148\u968f\u610f\u62ff\u51fa 8 8 \u4e2a\uff0c\u7136\u540e\u5206\u6210\u4e24\u5806\uff0c\u6bcf\u5806 4 4 \u4e2a\uff0c\u653e\u5230\u5929\u5e73\u4e0a\u79f0\u3002 \u5982\u679c\u5929\u5e73\u4e0a\u7684\u4e24\u5806\u662f\u76f8\u7b49\u7684\uff0c\u90a3\u4e48\u8bf4\u660e\u4e0d\u6b63\u5e38\u7684\u7403\u5728\u5269\u4e0b\u7684 4 4 \u4e2a\u4e2d\uff0c\u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u53d8\u6210\u4e86 4 4 \u4e2a\u5c0f\u7403\uff0c\u4e24\u6b21\u79f0\u91cd\uff0c\u627e\u51fa\u4e0d\u6b63\u5e38\u5c0f\u7403\u7684\u5b50\u95ee\u9898\uff0c\u8f83\u4e3a\u7b80\u5355\uff0c\u7559\u7ed9\u8bfb\u8005\u601d\u8003\u3002 \u90a3\u4e48\u4e0b\u9762\u6211\u4eec\u8003\u8651\u4e0d\u6b63\u5e38\u7684\u7403\u5728\u5929\u5e73\u4e0a\u7684 8 8 \u4e2a\u7403\u4e2d\u3002 \u6211\u4eec\u5047\u5b9a\u5929\u5e73\u5de6\u8fb9\u7684 4 4 \u4e2a\u7403\u4e3a A,\\;B,\\;C,\\;D A,\\;B,\\;C,\\;D \uff0c\u53f3\u8fb9\u7684 4 4 \u4e2a\u7403\u4e3a E,\\;F,\\;G,\\;H E,\\;F,\\;G,\\;H \u3002 \u6211\u4eec\u5047\u5b9a A + B + C + D > E + F + G + H A + B + C + D > E + F + G + H \u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u6709\u5df2\u77e5\u7684 4 4 \u4e2a\u6b63\u5e38\u7684\u7403\uff0c\u6807\u8bb0\u4e3a N N \u3002 \u90a3\u4e48\u5728\u7b2c\u4e8c\u6b21\u79f0\u91cd\u5f53\u4e2d\uff0c\u6211\u4eec\u4ea4\u6362 D D \u548c E E \u7684\u4f4d\u7f6e\uff0c\u5e76\u4e14\u7528\u4e09\u4e2a\u6b63\u5e38\u7684\u7403\uff0c\u66ff\u6362 F,\\;G,\\;H F,\\;G,\\;H \uff0c\u5373\u5929\u5e73\u4e0a\u7684\u6392\u5217\u53d8\u4e3a\uff1a A + B + C + E \\;|\\; D + N + N + N A + B + C + E \\;|\\; D + N + N + N \u4e0b\u9762\u5206\u4e09\u79cd\u60c5\u51b5\u8003\u8651\u3002 \u7b2c\u4e00\u79cd\uff0c\u6211\u4eec\u5047\u5b9a\uff1b A + B + C + E = D + N + N + N A + B + C + E = D + N + N + N \u8bf4\u660e\u6709\u95ee\u9898\u7684\u7403\u5728 F,\\;G,\\;H F,\\;G,\\;H \u4e2d\uff0c\u5e76\u4e14\u4e0d\u6b63\u5e38\u7684\u7403 \u504f\u8f7b \u3002 \u7b2c\u4e8c\u79cd\uff0c\u6211\u4eec\u5047\u5b9a\uff1a A + B + C + E > D + N + N + N A + B + C + E > D + N + N + N \u8bf4\u660e\u6709\u95ee\u9898\u7684\u7403\u5728 A,\\;B,\\;C A,\\;B,\\;C \u4e2d\uff0c\u5e76\u4e14\u4e0d\u6b63\u5e38\u7684\u7403 \u504f\u91cd \u3002 \u7b2c\u4e09\u79cd\uff0c\u6211\u4eec\u5047\u5b9a\uff1a A + B + C + E < D + N + N + N A + B + C + E < D + N + N + N \u8bf4\u660e\u6709\u95ee\u9898\u7684\u7403\u662f E E \u3002 \u90a3\u4e48\u5bf9\u4e8e\u7ed9\u51fa 3 3 \u4e2a\u7403\uff0c\u5e76\u4e14\u77e5\u9053\u4e0d\u6b63\u5e38\u7684\u7403\u662f\u504f\u8f7b\u8fd8\u662f\u504f\u91cd\u7684\u60c5\u51b5\u4e0b\uff0c\u7ed9\u51fa\u4e00\u6b21\u79f0\u91cd\u673a\u4f1a\uff0c\u662f\u8f83\u4e3a\u5bb9\u6613\u53bb\u89e3\u7684\uff0c\u6b64\u5904\u7559\u7ed9\u8bfb\u8005\u601d\u8003\u3002","title":"\u5c0f\u7403\u79f0\u91cd\u95ee\u9898"},{"location":"2022/5/ball-weighing-problem/#\u95ee\u9898","text":"\u7ed9\u51fa 12 12 \u4e2a\u5c0f\u7403\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u7403\u4e0d\u6b63\u5e38\uff0c\u4e0d\u8fc7\u5e76\u4e0d\u77e5\u9053\u90a3\u4e2a\u4e0d\u6b63\u5e38\u7684\u7403\u662f\u504f\u91cd\u7684\u8fd8\u662f\u504f\u8f7b\u7684\u3002 \u73b0\u5728\u6709\u4e00\u4e2a\u5929\u5e73\uff0c\u8981\u6c42\u901a\u8fc7\u81f3\u591a\u4e09\u6b21\u79f0\u91cd\uff0c\u627e\u51fa\u90a3\u4e2a\u4e0d\u6b63\u5e38\u7684\u5c0f\u7403\u3002","title":"\u95ee\u9898"},{"location":"2022/5/ball-weighing-problem/#\u89e3\u6cd5","text":"\u9996\u5148\u968f\u610f\u62ff\u51fa 8 8 \u4e2a\uff0c\u7136\u540e\u5206\u6210\u4e24\u5806\uff0c\u6bcf\u5806 4 4 \u4e2a\uff0c\u653e\u5230\u5929\u5e73\u4e0a\u79f0\u3002 \u5982\u679c\u5929\u5e73\u4e0a\u7684\u4e24\u5806\u662f\u76f8\u7b49\u7684\uff0c\u90a3\u4e48\u8bf4\u660e\u4e0d\u6b63\u5e38\u7684\u7403\u5728\u5269\u4e0b\u7684 4 4 \u4e2a\u4e2d\uff0c\u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u53d8\u6210\u4e86 4 4 \u4e2a\u5c0f\u7403\uff0c\u4e24\u6b21\u79f0\u91cd\uff0c\u627e\u51fa\u4e0d\u6b63\u5e38\u5c0f\u7403\u7684\u5b50\u95ee\u9898\uff0c\u8f83\u4e3a\u7b80\u5355\uff0c\u7559\u7ed9\u8bfb\u8005\u601d\u8003\u3002 \u90a3\u4e48\u4e0b\u9762\u6211\u4eec\u8003\u8651\u4e0d\u6b63\u5e38\u7684\u7403\u5728\u5929\u5e73\u4e0a\u7684 8 8 \u4e2a\u7403\u4e2d\u3002 \u6211\u4eec\u5047\u5b9a\u5929\u5e73\u5de6\u8fb9\u7684 4 4 \u4e2a\u7403\u4e3a A,\\;B,\\;C,\\;D A,\\;B,\\;C,\\;D \uff0c\u53f3\u8fb9\u7684 4 4 \u4e2a\u7403\u4e3a E,\\;F,\\;G,\\;H E,\\;F,\\;G,\\;H \u3002 \u6211\u4eec\u5047\u5b9a A + B + C + D > E + F + G + H A + B + C + D > E + F + G + H \u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u6709\u5df2\u77e5\u7684 4 4 \u4e2a\u6b63\u5e38\u7684\u7403\uff0c\u6807\u8bb0\u4e3a N N \u3002 \u90a3\u4e48\u5728\u7b2c\u4e8c\u6b21\u79f0\u91cd\u5f53\u4e2d\uff0c\u6211\u4eec\u4ea4\u6362 D D \u548c E E \u7684\u4f4d\u7f6e\uff0c\u5e76\u4e14\u7528\u4e09\u4e2a\u6b63\u5e38\u7684\u7403\uff0c\u66ff\u6362 F,\\;G,\\;H F,\\;G,\\;H \uff0c\u5373\u5929\u5e73\u4e0a\u7684\u6392\u5217\u53d8\u4e3a\uff1a A + B + C + E \\;|\\; D + N + N + N A + B + C + E \\;|\\; D + N + N + N \u4e0b\u9762\u5206\u4e09\u79cd\u60c5\u51b5\u8003\u8651\u3002 \u7b2c\u4e00\u79cd\uff0c\u6211\u4eec\u5047\u5b9a\uff1b A + B + C + E = D + N + N + N A + B + C + E = D + N + N + N \u8bf4\u660e\u6709\u95ee\u9898\u7684\u7403\u5728 F,\\;G,\\;H F,\\;G,\\;H \u4e2d\uff0c\u5e76\u4e14\u4e0d\u6b63\u5e38\u7684\u7403 \u504f\u8f7b \u3002 \u7b2c\u4e8c\u79cd\uff0c\u6211\u4eec\u5047\u5b9a\uff1a A + B + C + E > D + N + N + N A + B + C + E > D + N + N + N \u8bf4\u660e\u6709\u95ee\u9898\u7684\u7403\u5728 A,\\;B,\\;C A,\\;B,\\;C \u4e2d\uff0c\u5e76\u4e14\u4e0d\u6b63\u5e38\u7684\u7403 \u504f\u91cd \u3002 \u7b2c\u4e09\u79cd\uff0c\u6211\u4eec\u5047\u5b9a\uff1a A + B + C + E < D + N + N + N A + B + C + E < D + N + N + N \u8bf4\u660e\u6709\u95ee\u9898\u7684\u7403\u662f E E \u3002 \u90a3\u4e48\u5bf9\u4e8e\u7ed9\u51fa 3 3 \u4e2a\u7403\uff0c\u5e76\u4e14\u77e5\u9053\u4e0d\u6b63\u5e38\u7684\u7403\u662f\u504f\u8f7b\u8fd8\u662f\u504f\u91cd\u7684\u60c5\u51b5\u4e0b\uff0c\u7ed9\u51fa\u4e00\u6b21\u79f0\u91cd\u673a\u4f1a\uff0c\u662f\u8f83\u4e3a\u5bb9\u6613\u53bb\u89e3\u7684\uff0c\u6b64\u5904\u7559\u7ed9\u8bfb\u8005\u601d\u8003\u3002","title":"\u89e3\u6cd5"},{"location":"2022/5/domjudge-team-account-import-guide/","text":"DOMjudge Team Account Import Guide \u672c\u6559\u7a0b\u57fa\u4e8e\u7684 DOMjudge \u7248\u672c\u4e3a DOMjudge 8.1.0DEV/9b40150 \u3002 Contents Write in front Basic concept Account Contest Team Team categories Team affiliations Import Teams Import Accounts Reference Write in front \u5982\u679c\u9700\u8981\u4f7f\u7528 import \u529f\u80fd\uff0c\u9700\u8981\u5c06 Data source \u8bbe\u7f6e\u4e3a configuration data external \u6216\u8005 configuration and live data external \u3002 \u5426\u5219\uff1a \u5728 UI \u754c\u9762\u65b0\u589e\u65b0\u7684 Team categories\u3001Team affiliations\u3001Team\u3001User \u7b49\u4e0d\u4f1a\u6709 External ID \u5b57\u6bb5\u3002 \u5173\u8054\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u8ddf\u6570\u636e\u5e93\u8868\u4e2d\u7684 externalid \u5173\u8054\u3002 \u793e\u533a\u4e2d\u76f8\u5173\u7684\u8ba8\u8bba\u53ef\u4ee5\u53c2\u8003\uff1a DOMjudge/domjudge#1574 Basic concept Account \u8d26\u53f7\uff08Account\uff09\uff0c\u8d26\u53f7\u662f\u8fdb\u5165\u7cfb\u7edf\u7684\u5165\u53e3\u3002 \u4e00\u4e2a\u8d26\u53f7\u53ef\u4ee5\u88ab\u8d4b\u4e88\u591a\u4e2a\u89d2\u8272\u3002 \u4e0d\u540c\u7684\u89d2\u8272\u4ee3\u8868\u5177\u6709\u4e0d\u540c\u7684\u6743\u9650\u96c6\u5408\uff0c\u88ab\u8d4b\u4e88\u591a\u4e2a\u89d2\u8272\u7684\u8d26\u53f7\uff0c\u5b83\u7684\u6743\u9650\u96c6\u5408\u662f\u8fd9\u51e0\u4e2a\u89d2\u8272\u7684\u6743\u9650\u96c6\u5408\u7684\u4ea4\u96c6\u3002 Contest Contest \u4e00\u822c\u6307\u4e00\u573a\u6bd4\u8d5b\u3002 Team \u961f\u4f0d\uff08Team\uff09\uff0c\u662f\u53c2\u52a0 Contest \u7684\u5165\u53e3\u3002 Team \u4e0e Contest \u662f N:M \u5173\u7cfb\uff0c\u5373\u4e00\u4e2a Team \u53ef\u4ee5\u53c2\u52a0\u591a\u4e2a Contest\uff0c\u4e00\u4e2a Contest \u4e2d\u53ef\u4ee5\u5305\u542b\u591a\u4e2a Team\u3002 \u800c Team \u548c Account \u662f 1:N \u5173\u7cfb\uff0c\u5373\u4e00\u4e2a Team \u53ef\u4ee5\u7ed1\u5b9a\u591a\u4e2a Account\uff0c\u800c\u4e00\u4e2a Account \u53ea\u80fd\u7ed1\u5b9a\u4e00\u4e2a Team\u3002 \u5f53\u7136\uff0cTeam \u53ef\u4ee5\u4e0d\u7ed1\u5b9a\u67d0\u4e00\u4e2a Account\uff0cAccount \u4e5f\u53ef\u4ee5\u4e0d\u7ed1\u5b9a\u67d0\u4e00\u4e2a Team\uff0c\u5373\u4f7f\u8d4b\u4e88 Account \u7684\u89d2\u8272\u662f Team Member\u3002 Team categories \u8fd9\u4e2a\u662f\u6307 Team \u7684\u7c7b\u522b\uff0c\u5e38\u89c1\u7684\u53ef\u80fd\u6709\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u522b\u3002 Team categories \u548c Team \u662f 1:N \u5173\u7cfb\uff0c\u5373\u4e00\u4e2a Team \u53ea\u53ef\u4ee5\u5c5e\u4e8e\u4e00\u4e2a Team categories\uff0c\u4f46\u662f\u4e00\u4e2a Team categories \u4e0b\u53ef\u4ee5\u6302\u7740\u591a\u4e2a\u961f\u4f0d\u3002 \u8fd9\u4e2a\u4e00\u822c\u4e0d\u9700\u8981\u5bfc\u5165\uff0c\u5982\u679c\u9700\u8981\u589e\u52a0 Team categories\uff0c\u4e5f\u53ef\u4ee5\u5728\u7ba1\u7406\u754c\u9762\u64cd\u4f5c\uff0c\u5982\u679c\u6709\u5bfc\u5165\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 Team affiliations \u8fd9\u4e2a\u5728\u533a\u57df\u8d5b\u4e2d\uff0c\u4e00\u822c\u4f1a\u88ab\u8d4b\u4e88\u5b66\u6821\u6216\u8005\u4f01\u4e1a\uff08\u6bd4\u5982\u4f01\u4e1a\u6253\u661f\u961f\u4f0d\u53c2\u8d5b\uff09\u7684\u542b\u4e49\u3002 \u5728\u6211\u4eec\u5b66\u6821\u5185\u90e8\u7684\u6bd4\u8d5b\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u5c31\u4f1a\u8d4b\u4e88\u5b83\u73ed\u7ea7\u7684\u542b\u4e49\uff0c\u6bd4\u5982\u4e0b\u56fe\u6240\u793a\uff1a Team affiliations \u548c Team \u662f 1:N \u5173\u7cfb\uff0c\u5373\u4e00\u4e2a Team \u53ea\u53ef\u4ee5\u5c5e\u4e8e\u4e00\u4e2a Team affiliations\uff0c\u4f46\u662f\u4e00\u4e2a Team affiliations \u4e0b\u53ef\u4ee5\u6302\u7740\u591a\u4e2a\u961f\u4f0d\u3002 \u5982\u679c\u9700\u8981\u5bfc\u5165 Team affiliations\uff0c\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u3002 \u8fd9\u91cc\u53ef\u80fd\u5b58\u5728\u7684\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\uff1a \u73b0\u5728\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u4e0d\u5b58\u5728\u4e86\u3002 \u4e4b\u524d\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\uff0c\u662f\u7531\u4e8e\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e Data source\uff0c\u53ef\u4ee5\u53c2\u8003 Write in front \u3002 \u4e0d\u8fc7\u5982\u679c\u6709\u4e2d\u9014\u624d\u53d1\u73b0\u7684\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u6b65\u9aa4\uff0c\u4fee\u590d\u4e00\u4e0b\u3002 \u6570\u636e\u5e93\u91cc\u6709\u4e00\u4e2a\u5b57\u6bb5\u662f externalid \uff0c\u8fd9\u4e2a\u5b57\u6bb5\u4f1a\u5728 \u5bfc\u5165\u961f\u4f0d \u65f6\u7528\u4e8e\u7ed1\u5b9a Team \u6240\u5c5e\u7684 Team affiliations\u3002 \u4f46\u662f\u5982\u679c\u662f\u901a\u8fc7 UI \u754c\u9762\u65b0\u589e\u7684 Team affiliations\uff0c externalid \u8fd9\u4e2a\u5b57\u6bb5\u4f1a\u4e3a null \uff0c\u5e76\u4e14\u540e\u7eed\u5728 UI \u754c\u9762\u4e2d\u65e0\u6cd5\u7f16\u8f91 externalid \u5b57\u6bb5\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u8981\u5728\u540e\u7eed\u7684 Import Teams \u4e2d\uff0c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u901a\u8fc7 UI \u754c\u9762\u65b0\u589e\u7684 Team affiliations\uff0c\u90a3\u4e48\u53ef\u80fd\u9700\u8981\u64cd\u4f5c\u6570\u636e\u5e93\u4fee\u6539\u4e00\u4e0b Team affiliations \u7684 externalid \u3002 \u4e3a\u4e86\u4e0b\u6587\u7684 Import Teams\uff0c\u901a\u8fc7\u64cd\u4f5c\u6570\u636e\u5e93\uff0c\u5c06 externalid \u8d4b\u503c\u4e3a affilid \uff0c\u5982\u4e0b\u6240\u793a\uff1a \u90a3\u4e48\uff0c\u5bf9\u4e8e\u4e0b\u6587\u6765\u8bf4\uff0c\u6211\u4eec\u6240\u9700\u7528\u5230\u7684 Team affiliations\uff0c\u53ef\u4ee5\u8ba4\u4e3a externalid = affilid \u3002 Import Teams \u53ef\u4ee5\u5148\u67e5\u770b \u5b98\u65b9\u6587\u6863 \u5f97\u77e5\u76f8\u5173\u7684\u6570\u636e\u683c\u5f0f\u3002 \u5728\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u91c7\u7528 JSON \u683c\u5f0f\u7684\u6587\u4ef6\u3002 \u6211\u4eec\u7528\u4e8e\u5bfc\u5165\u6240\u7528\u7684\u6570\u636e teams.json [ { \"id\" : \"dup4team001\" , \"group_ids\" : [ \"3\" ], \"name\" : \"dup4team001\" , \"display_name\" : \"dup4team001\" , \"organization_id\" : \"3\" } ] \u867d\u7136\u5728 8.0 \u7684\u5b98\u65b9\u6587\u6863\u4e2d\uff0c\u58f0\u660e id \u5b57\u6bb5\u5e94\u8be5\u662f\u4e2a Integer\u3002 \u4f46\u662f\u5728\u793a\u4f8b\u4e2d\uff0c id \u5b57\u6bb5\u662f\u4e2a String\uff0c\u5e76\u4e14\u5b83\u5728\u6570\u636e\u5e93\u4e2d\u5bf9\u5e94\u7684\u662f externalid \uff0c\u662f\u4e2a varchar(255) \u7c7b\u578b\u3002 \u8fd9\u4e2a typo \u5728 8.1.0DEV/9b40150 \u4e2d\u5df2\u7ecf\u88ab\u4fee\u590d\u3002 \u4e0a\u6587\u4e2d\u7684 teams.json \uff0c\u5bfc\u5165\u4e4b\u540e\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u662f\u8fd9\u6837\u7684\uff1a \u53ef\u4ee5\u53d1\u73b0 teamid \u662f\u81ea\u589e\u7684\uff0c\u4e0d\u53d7\u6211\u4eec\u63a7\u5236\u7684\uff0c\u800c teams.json \u4e2d\u7684 id \u5bf9\u5e94\u6570\u636e\u5e93\u4e2d\u7684 externalid \u3002 \u800c\u4e0a\u56fe\u662f UI \u4e2d\u7684\u6837\u5b50\uff0c\u53ef\u4ee5\u5bf9\u7167\u4e0a\u6587\u4e2d\u7684 Team categories \u548c Team affiliations \u90e8\u5206\uff0c\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u7684 Categories \u548c Affiliations \u662f\u7b26\u5408\u6211\u4eec\u9884\u671f\u7684\u3002 Import Accounts \u53ef\u4ee5\u5148\u67e5\u770b \u5b98\u65b9\u6587\u6863 \u5f97\u77e5\u76f8\u5173\u7684\u6570\u636e\u683c\u5f0f\u3002 accounts.json [ { \"id\" : \"dup4account001\" , \"username\" : \"dup4account001\" , \"password\" : \"P3xm33imve\" , \"type\" : \"team\" , \"name\" : \"dup4account001\" , \"team_id\" : \"dup4team001\" , \"ip\" : \"10.10.2.1\" } ] \u5bfc\u5165\u7684\u7ed3\u679c\u5982\u4e0a\u3002 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\uff0c\u548c\u6211\u4eec\u4e0a\u6587\u5bfc\u5165\u7684 team \u7ed1\u5b9a\u5728\u4e00\u8d77\u4e86\u3002 Reference https://www.domjudge.org/docs/manual/8.0/import.html","title":"DOMjudge Team Account Import Guide"},{"location":"2022/5/domjudge-team-account-import-guide/#write-in-front","text":"\u5982\u679c\u9700\u8981\u4f7f\u7528 import \u529f\u80fd\uff0c\u9700\u8981\u5c06 Data source \u8bbe\u7f6e\u4e3a configuration data external \u6216\u8005 configuration and live data external \u3002 \u5426\u5219\uff1a \u5728 UI \u754c\u9762\u65b0\u589e\u65b0\u7684 Team categories\u3001Team affiliations\u3001Team\u3001User \u7b49\u4e0d\u4f1a\u6709 External ID \u5b57\u6bb5\u3002 \u5173\u8054\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u8ddf\u6570\u636e\u5e93\u8868\u4e2d\u7684 externalid \u5173\u8054\u3002 \u793e\u533a\u4e2d\u76f8\u5173\u7684\u8ba8\u8bba\u53ef\u4ee5\u53c2\u8003\uff1a DOMjudge/domjudge#1574","title":"Write in front"},{"location":"2022/5/domjudge-team-account-import-guide/#basic-concept","text":"","title":"Basic concept"},{"location":"2022/5/domjudge-team-account-import-guide/#account","text":"\u8d26\u53f7\uff08Account\uff09\uff0c\u8d26\u53f7\u662f\u8fdb\u5165\u7cfb\u7edf\u7684\u5165\u53e3\u3002 \u4e00\u4e2a\u8d26\u53f7\u53ef\u4ee5\u88ab\u8d4b\u4e88\u591a\u4e2a\u89d2\u8272\u3002 \u4e0d\u540c\u7684\u89d2\u8272\u4ee3\u8868\u5177\u6709\u4e0d\u540c\u7684\u6743\u9650\u96c6\u5408\uff0c\u88ab\u8d4b\u4e88\u591a\u4e2a\u89d2\u8272\u7684\u8d26\u53f7\uff0c\u5b83\u7684\u6743\u9650\u96c6\u5408\u662f\u8fd9\u51e0\u4e2a\u89d2\u8272\u7684\u6743\u9650\u96c6\u5408\u7684\u4ea4\u96c6\u3002","title":"Account"},{"location":"2022/5/domjudge-team-account-import-guide/#contest","text":"Contest \u4e00\u822c\u6307\u4e00\u573a\u6bd4\u8d5b\u3002","title":"Contest"},{"location":"2022/5/domjudge-team-account-import-guide/#team","text":"\u961f\u4f0d\uff08Team\uff09\uff0c\u662f\u53c2\u52a0 Contest \u7684\u5165\u53e3\u3002 Team \u4e0e Contest \u662f N:M \u5173\u7cfb\uff0c\u5373\u4e00\u4e2a Team \u53ef\u4ee5\u53c2\u52a0\u591a\u4e2a Contest\uff0c\u4e00\u4e2a Contest \u4e2d\u53ef\u4ee5\u5305\u542b\u591a\u4e2a Team\u3002 \u800c Team \u548c Account \u662f 1:N \u5173\u7cfb\uff0c\u5373\u4e00\u4e2a Team \u53ef\u4ee5\u7ed1\u5b9a\u591a\u4e2a Account\uff0c\u800c\u4e00\u4e2a Account \u53ea\u80fd\u7ed1\u5b9a\u4e00\u4e2a Team\u3002 \u5f53\u7136\uff0cTeam \u53ef\u4ee5\u4e0d\u7ed1\u5b9a\u67d0\u4e00\u4e2a Account\uff0cAccount \u4e5f\u53ef\u4ee5\u4e0d\u7ed1\u5b9a\u67d0\u4e00\u4e2a Team\uff0c\u5373\u4f7f\u8d4b\u4e88 Account \u7684\u89d2\u8272\u662f Team Member\u3002","title":"Team"},{"location":"2022/5/domjudge-team-account-import-guide/#team-categories","text":"\u8fd9\u4e2a\u662f\u6307 Team \u7684\u7c7b\u522b\uff0c\u5e38\u89c1\u7684\u53ef\u80fd\u6709\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u522b\u3002 Team categories \u548c Team \u662f 1:N \u5173\u7cfb\uff0c\u5373\u4e00\u4e2a Team \u53ea\u53ef\u4ee5\u5c5e\u4e8e\u4e00\u4e2a Team categories\uff0c\u4f46\u662f\u4e00\u4e2a Team categories \u4e0b\u53ef\u4ee5\u6302\u7740\u591a\u4e2a\u961f\u4f0d\u3002 \u8fd9\u4e2a\u4e00\u822c\u4e0d\u9700\u8981\u5bfc\u5165\uff0c\u5982\u679c\u9700\u8981\u589e\u52a0 Team categories\uff0c\u4e5f\u53ef\u4ee5\u5728\u7ba1\u7406\u754c\u9762\u64cd\u4f5c\uff0c\u5982\u679c\u6709\u5bfc\u5165\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863","title":"Team categories"},{"location":"2022/5/domjudge-team-account-import-guide/#team-affiliations","text":"\u8fd9\u4e2a\u5728\u533a\u57df\u8d5b\u4e2d\uff0c\u4e00\u822c\u4f1a\u88ab\u8d4b\u4e88\u5b66\u6821\u6216\u8005\u4f01\u4e1a\uff08\u6bd4\u5982\u4f01\u4e1a\u6253\u661f\u961f\u4f0d\u53c2\u8d5b\uff09\u7684\u542b\u4e49\u3002 \u5728\u6211\u4eec\u5b66\u6821\u5185\u90e8\u7684\u6bd4\u8d5b\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u5c31\u4f1a\u8d4b\u4e88\u5b83\u73ed\u7ea7\u7684\u542b\u4e49\uff0c\u6bd4\u5982\u4e0b\u56fe\u6240\u793a\uff1a Team affiliations \u548c Team \u662f 1:N \u5173\u7cfb\uff0c\u5373\u4e00\u4e2a Team \u53ea\u53ef\u4ee5\u5c5e\u4e8e\u4e00\u4e2a Team affiliations\uff0c\u4f46\u662f\u4e00\u4e2a Team affiliations \u4e0b\u53ef\u4ee5\u6302\u7740\u591a\u4e2a\u961f\u4f0d\u3002 \u5982\u679c\u9700\u8981\u5bfc\u5165 Team affiliations\uff0c\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u3002 \u8fd9\u91cc\u53ef\u80fd\u5b58\u5728\u7684\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\uff1a \u73b0\u5728\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u4e0d\u5b58\u5728\u4e86\u3002 \u4e4b\u524d\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\uff0c\u662f\u7531\u4e8e\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e Data source\uff0c\u53ef\u4ee5\u53c2\u8003 Write in front \u3002 \u4e0d\u8fc7\u5982\u679c\u6709\u4e2d\u9014\u624d\u53d1\u73b0\u7684\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u6b65\u9aa4\uff0c\u4fee\u590d\u4e00\u4e0b\u3002 \u6570\u636e\u5e93\u91cc\u6709\u4e00\u4e2a\u5b57\u6bb5\u662f externalid \uff0c\u8fd9\u4e2a\u5b57\u6bb5\u4f1a\u5728 \u5bfc\u5165\u961f\u4f0d \u65f6\u7528\u4e8e\u7ed1\u5b9a Team \u6240\u5c5e\u7684 Team affiliations\u3002 \u4f46\u662f\u5982\u679c\u662f\u901a\u8fc7 UI \u754c\u9762\u65b0\u589e\u7684 Team affiliations\uff0c externalid \u8fd9\u4e2a\u5b57\u6bb5\u4f1a\u4e3a null \uff0c\u5e76\u4e14\u540e\u7eed\u5728 UI \u754c\u9762\u4e2d\u65e0\u6cd5\u7f16\u8f91 externalid \u5b57\u6bb5\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u8981\u5728\u540e\u7eed\u7684 Import Teams \u4e2d\uff0c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u901a\u8fc7 UI \u754c\u9762\u65b0\u589e\u7684 Team affiliations\uff0c\u90a3\u4e48\u53ef\u80fd\u9700\u8981\u64cd\u4f5c\u6570\u636e\u5e93\u4fee\u6539\u4e00\u4e0b Team affiliations \u7684 externalid \u3002 \u4e3a\u4e86\u4e0b\u6587\u7684 Import Teams\uff0c\u901a\u8fc7\u64cd\u4f5c\u6570\u636e\u5e93\uff0c\u5c06 externalid \u8d4b\u503c\u4e3a affilid \uff0c\u5982\u4e0b\u6240\u793a\uff1a \u90a3\u4e48\uff0c\u5bf9\u4e8e\u4e0b\u6587\u6765\u8bf4\uff0c\u6211\u4eec\u6240\u9700\u7528\u5230\u7684 Team affiliations\uff0c\u53ef\u4ee5\u8ba4\u4e3a externalid = affilid \u3002","title":"Team affiliations"},{"location":"2022/5/domjudge-team-account-import-guide/#import-teams","text":"\u53ef\u4ee5\u5148\u67e5\u770b \u5b98\u65b9\u6587\u6863 \u5f97\u77e5\u76f8\u5173\u7684\u6570\u636e\u683c\u5f0f\u3002 \u5728\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u91c7\u7528 JSON \u683c\u5f0f\u7684\u6587\u4ef6\u3002 \u6211\u4eec\u7528\u4e8e\u5bfc\u5165\u6240\u7528\u7684\u6570\u636e teams.json [ { \"id\" : \"dup4team001\" , \"group_ids\" : [ \"3\" ], \"name\" : \"dup4team001\" , \"display_name\" : \"dup4team001\" , \"organization_id\" : \"3\" } ] \u867d\u7136\u5728 8.0 \u7684\u5b98\u65b9\u6587\u6863\u4e2d\uff0c\u58f0\u660e id \u5b57\u6bb5\u5e94\u8be5\u662f\u4e2a Integer\u3002 \u4f46\u662f\u5728\u793a\u4f8b\u4e2d\uff0c id \u5b57\u6bb5\u662f\u4e2a String\uff0c\u5e76\u4e14\u5b83\u5728\u6570\u636e\u5e93\u4e2d\u5bf9\u5e94\u7684\u662f externalid \uff0c\u662f\u4e2a varchar(255) \u7c7b\u578b\u3002 \u8fd9\u4e2a typo \u5728 8.1.0DEV/9b40150 \u4e2d\u5df2\u7ecf\u88ab\u4fee\u590d\u3002 \u4e0a\u6587\u4e2d\u7684 teams.json \uff0c\u5bfc\u5165\u4e4b\u540e\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u662f\u8fd9\u6837\u7684\uff1a \u53ef\u4ee5\u53d1\u73b0 teamid \u662f\u81ea\u589e\u7684\uff0c\u4e0d\u53d7\u6211\u4eec\u63a7\u5236\u7684\uff0c\u800c teams.json \u4e2d\u7684 id \u5bf9\u5e94\u6570\u636e\u5e93\u4e2d\u7684 externalid \u3002 \u800c\u4e0a\u56fe\u662f UI \u4e2d\u7684\u6837\u5b50\uff0c\u53ef\u4ee5\u5bf9\u7167\u4e0a\u6587\u4e2d\u7684 Team categories \u548c Team affiliations \u90e8\u5206\uff0c\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u7684 Categories \u548c Affiliations \u662f\u7b26\u5408\u6211\u4eec\u9884\u671f\u7684\u3002","title":"Import Teams"},{"location":"2022/5/domjudge-team-account-import-guide/#import-accounts","text":"\u53ef\u4ee5\u5148\u67e5\u770b \u5b98\u65b9\u6587\u6863 \u5f97\u77e5\u76f8\u5173\u7684\u6570\u636e\u683c\u5f0f\u3002 accounts.json [ { \"id\" : \"dup4account001\" , \"username\" : \"dup4account001\" , \"password\" : \"P3xm33imve\" , \"type\" : \"team\" , \"name\" : \"dup4account001\" , \"team_id\" : \"dup4team001\" , \"ip\" : \"10.10.2.1\" } ] \u5bfc\u5165\u7684\u7ed3\u679c\u5982\u4e0a\u3002 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\uff0c\u548c\u6211\u4eec\u4e0a\u6587\u5bfc\u5165\u7684 team \u7ed1\u5b9a\u5728\u4e00\u8d77\u4e86\u3002","title":"Import Accounts"},{"location":"2022/5/domjudge-team-account-import-guide/#reference","text":"https://www.domjudge.org/docs/manual/8.0/import.html","title":"Reference"},{"location":"2022/5/google-code-jam/round-2-2022/","text":"Google Code Jam Round 2 2022 Record Contents Info Problems Spiraling Into Control Pixelated Circle Saving the Jelly I, O Bot Info Practice Link Code Repo Link Score: 22 Rank: 1680 Problems Spiraling Into Control \u9898\u610f\uff1a \u7ed9\u51fa\u4e00\u4e2a n \\cdot n n \\cdot n \u7684\u86c7\u5f62\u77e9\u9635\u3002 \u4ece (x_0, y_0) (x_0, y_0) \u80fd\u591f\u5230\u8fbe (x_1, y_1) (x_1, y_1) \uff0c\u5f53\u4e14\u4ec5\u5f53 (x_0, y_0) (x_0, y_0) \u548c (x_1, y_1) (x_1, y_1) \u76f8\u90bb\uff0c\u5e76\u4e14\u5728\u86c7\u5f62\u77e9\u9635\u4e0a (x_1, y_1) (x_1, y_1) \u4e0a\u5bf9\u5e94\u7684\u6570\u5b57\u5927\u4e8e (x_0, y_0) (x_0, y_0) \u4e0a\u5bf9\u5e94\u7684\u6570\u5b57\u3002 \u73b0\u5728\u8981\u6c42\u4ece 1 1 \u8d70\u5230 n \\cdot n n \\cdot n \uff0c\u5e76\u4e14\u6070\u597d\u7528 k k \u6b65\uff0c\u95ee\u662f\u5426\u53ef\u80fd\uff0c\u53ef\u80fd\u7684\u8bdd\uff0c\u7ed9\u51fa\u4e2d\u95f4\u8df3\u8dc3\u7684\u6b65\u9aa4\u3002 \u601d\u8def\uff1a \u731c\u60f3\u4e86\u4e00\u4e0b\uff0c\u5f53\u524d\u8fd9\u4e00\u6b65\u662f\u5426\u9009\u62e9\u8df3\u8dc3\uff0c\u53d6\u51b3\u4e8e\u8df3\u8dc3\u540e\u5269\u4f59\u7684\u6700\u5927\u6b65\u6570\u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u53ef\u7528\u6b65\u6570\uff0c\u662f\u7684\u8bdd\uff0c\u5c31\u8df3\u8dc3\u3002 \u4f46\u662f\u5927 case TLE \u4e86\u3002 Small Case Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #include <utility> #include <vector> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } // #ifdef LOCAL // #include <debug.hpp> // #else // #define dbg(...) // #endif // head const int N = 1e4 + 10 ; int n , k ; int f [ N ][ N ]; int mv [][ 2 ] = {{ 0 , 1 }, { 1 , 0 }, { 0 , -1 }, { -1 , 0 }}; void genG () { int ix = 1 ; int mx = 0 ; int x = 1 , y = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { f [ i ][ j ] = -1 ; } } const auto ok = []( int x , int y ) { if ( x < 1 || x > n || y < 1 || y > n ) { return false ; } if ( f [ x ][ y ] != -1 ) { return false ; } return true ; }; f [ 1 ][ 1 ] = 1 ; while ( ix < n * n ) { ++ ix ; int nx = x + mv [ mx ][ 0 ]; int ny = y + mv [ mx ][ 1 ]; if ( ! ok ( nx , ny )) { mx = ( mx + 1 ) % 4 ; } nx = x + mv [ mx ][ 0 ]; ny = y + mv [ mx ][ 1 ]; x = nx ; y = ny ; f [ x ][ y ] = ix ; } } void printG () { for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { cout << f [ i ][ j ] << \" \\n \" [ j == n ]; } } } struct node { int x , y , v ; bool operator < ( const node & other ) const { return v > other . v ; } }; vector < pair < int , int >> gao () { auto res = vector < pair < int , int >> (); const auto ok = []( int x , int y ) { if ( x < 1 || x > n || y < 1 || y > n ) { return false ; } return true ; }; node cur = { . x = 1 , . y = 1 , . v = 1 , }; int _k = k ; int target = n * n ; while ( _k > 0 ) { vector < node > t ; // cout << cur.x << \" \" << cur.y << \" \" << cur.v << \" \" << _k << \" \" << res.size() << endl; for ( int i = 0 ; i < 4 ; i ++ ) { int nx = cur . x + mv [ i ][ 0 ]; int ny = cur . y + mv [ i ][ 1 ]; if ( ok ( nx , ny ) && f [ nx ][ ny ] > cur . v ) { t . emplace_back ( node { . x = nx , . y = ny , . v = f [ nx ][ ny ], }); } } sort ( t . begin (), t . end ()); int ok = 0 ; for ( const auto & nx : t ) { if ( _k - 1 <= target - nx . v ) { if ( nx . v - cur . v > 1 ) { res . push_back ( make_pair ( cur . v , nx . v )); } cur = nx ; ok = 1 ; break ; } } if ( ok == 0 ) { return vector < pair < int , int >> (); } -- _k ; } if ( cur . v != target ) { return vector < pair < int , int >> (); } return res ; } void run () { cin >> n >> k ; genG (); // printG(); auto res = gao (); if ( res . empty ()) { cout << \"IMPOSSIBLE \\n \" ; } else { cout << res . size () << \" \\n \" ; for ( const auto & it : res ) { cout << it . first << \" \" << it . second << \" \\n \" ; } } } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T = 0 ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; } Pixelated Circle \u9898\u610f\uff1a \u7ed9\u51fa\u4e24\u79cd\u5728\u77e9\u9635\u4e0a\u300c\u753b\u5706\u300d\u7684\u51fd\u6570\uff0c\u6c42\u4e24\u79cd\u65b9\u5f0f\u753b\u51fa\u6765\u7684\u300c\u9ed1\u70b9\u300d\u7684\u6570\u91cf\u5dee\u5f02\u3002 \u601d\u8def\uff1a \u5c0f case \u5c31\u5c06\u9898\u9762\u4e2d\u7684\u4f2a\u4ee3\u7801\u7ffb\u8bd1\u4e00\u4e0b\uff0c\u7136\u540e\u8dd1\u4e00\u904d\uff0c\u6c42\u4e2a\u6570\u91cf\u7684 diff\u3002 Small Case Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } // head const int N = 1e4 + 10 ; int r ; int f [ N ][ N ]; int get_pixel ( int x , int y ) { return f [ x + 100 ][ y + 100 ]; } void set_pixel ( int x , int y , int v = 0 ) { f [ x + 100 ][ y + 100 ] = v ; } void set_pixel_to_black ( int x , int y ) { set_pixel ( x , y , 1 ); } int get_all_pixel () { int res = 0 ; for ( int i = - r ; i <= r ; i ++ ) { for ( int j = - r ; j <= r ; j ++ ) { res += get_pixel ( i , j ); } } return res ; } void init () { for ( int i = - r ; i <= r ; i ++ ) { for ( int j = - r ; j <= r ; j ++ ) { set_pixel ( i , j , 0 ); } } } void draw_circle_perimeter ( int r ) { for ( int x = - r ; x <= r ; x ++ ) { int y = static_cast < int > ( round ( sqrt ( r * r - x * x ))); set_pixel_to_black ( x , y ); set_pixel_to_black ( x , - y ); set_pixel_to_black ( y , x ); set_pixel_to_black ( - y , x ); } } void draw_circle_filled_wrong ( int r ) { for ( int i = 0 ; i <= r ; i ++ ) { draw_circle_perimeter ( i ); } } void draw_circle_filled ( int r ) { for ( int i = - r ; i <= r ; i ++ ) { for ( int j = - r ; j <= r ; j ++ ) { int x = static_cast < int > ( round ( sqrt ( i * i + j * j ))); if ( x <= r ) { set_pixel_to_black ( i , j ); } } } } void run () { cin >> r ; init (); draw_circle_filled ( r ); int a = get_all_pixel (); init (); draw_circle_filled_wrong ( r ); int b = get_all_pixel (); cout << abs ( a - b ) << endl ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T = 0 ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; } Saving the Jelly \u9898\u610f\uff1a \u5728\u4e00\u4e2a\u8db3\u7403\u573a\u4e0a\uff0c\u6709 n n \u4e2a\u4eba\uff0c n + 1 n + 1 \u4e2a\u7cd6\u679c\u3002 \u7b2c i i \u4e2a\u4eba\u7684\u4f4d\u7f6e\u662f (x_i, y_i) (x_i, y_i) \u3002 \u7b2c j j \u4e2a\u7cd6\u679c\u7684\u4f4d\u7f6e\u662f (x_j, y_j) (x_j, y_j) \u3002 \u73b0\u5728\u6709\u4e2a\u6559\u7ec3\uff0c\u6bcf\u6b21\u53ef\u4ee5\u6307\u5b9a\u7b2c i i \u4e2a\u4eba\u53bb\u62ff\u7cd6\u679c\uff0c\u8fd9\u4e2a\u4eba\u53ea\u80fd\u9009\u62e9\u79bb\u81ea\u5df1\u6700\u8fd1\u7684\u4e00\u9897\u7cd6\u679c\uff0c\u5982\u679c\u6709\u591a\u9897\u7cd6\u679c\u79bb\u81ea\u5df1\u6700\u8fd1\uff0c\u90a3\u4e48\u7531\u6559\u7ec3\u6307\u5b9a\u4ed6\u62ff\u53d6\u54ea\u4e00\u9897\u3002 \u95ee\uff0c\u6709\u6ca1\u6709\u65b9\u6848\uff0c\u4f7f\u5f97\u6807\u53f7\u4e3a 0 0 \u7684\u7cd6\u679c\uff0c\u6700\u540e\u4e0d\u88ab\u62ff\u8d70\uff1f \u601d\u8def\uff1a \u9488\u5bf9\u5c0f case\uff1a \u5168\u6392\u5217\u679a\u4e3e\u4eba\u62ff\u7684\u987a\u5e8f\uff0c\u7136\u540e\u66b4\u529b check\u3002 check \u7684\u65f6\u5019\uff0c\u5982\u679c\u67d0\u4e2a\u4eba\u5728\u8f6e\u5230\u65f6\u6709\u591a\u4e2a\u5019\u9009\u7cd6\u679c\uff0c\u600e\u4e48\u529e\uff1f \u53ea\u8981\u4e0d\u53d6 0 0 \uff0c\u5176\u5b83\u968f\u4fbf\u53d6\u3002 \u56e0\u4e3a\u5982\u679c\u5b58\u5728\u8fd9\u4e2a\u4eba\u4e00\u5b9a\u5f97\u53d6\u67d0\u4e00\u9897\u7cd6\u679c\uff0c\u90a3\u4e48\u6700\u540e\u65b9\u6848\u624d\u80fd\u8dd1\u901a\u7684\u8bdd\uff0c\u90a3\u4e48\u80af\u5b9a\u6709\u53e6\u4e00\u79cd\u6392\u5217\u4f7f\u5f97\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u4eba\u5728\u524d\u9762\u53d6\u8d70\u4ed6\u6240\u9700\u7684\u7cd6\u679c\u3002 Small Case Code #include <bits/stdc++.h> #include <algorithm> #include <cstring> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #include <limits> #include <utility> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } // head int n , vis [ 12 ]; long long calcDis ( int x , int y , int nx , int ny ) { return 1l l * ( x - nx ) * ( x - nx ) + 1l l * ( y - ny ) * ( y - ny ); } ll dis [ 30 ][ 30 ]; struct node { int ix ; long long dis ; bool operator < ( const node & other ) const { if ( dis == other . dis ) { return ix > other . ix ; } return dis < other . dis ; } }; vector < node > disVec [ 15 ]; void run () { cin >> n ; vector < pair < int , int >> f , g ; for ( int i = 0 ; i < n ; i ++ ) { int x , y ; cin >> x >> y ; f . push_back ( make_pair ( x , y )); } for ( int i = 0 ; i < n + 1 ; i ++ ) { int x , y ; cin >> x >> y ; g . push_back ( make_pair ( x , y )); } for ( int i = 0 ; i < n ; i ++ ) { disVec [ i ]. clear (); for ( int j = 0 ; j < n + 1 ; j ++ ) { dis [ i ][ j ] = calcDis ( f [ i ]. first , f [ i ]. second , g [ j ]. first , g [ j ]. second ); disVec [ i ]. push_back ( node { . ix = j , . dis = dis [ i ][ j ], }); } sort ( disVec [ i ]. begin (), disVec [ i ]. end ()); while ( ! disVec [ i ]. empty () && disVec [ i ]. back (). ix != 0 ) { disVec [ i ]. pop_back (); } disVec [ i ]. pop_back (); if ( disVec [ i ]. empty ()) { cout << \"IMPOSSIBLE \\n \" ; return ; } } vector < int > h ; h . reserve ( n ); for ( int i = 0 ; i < n ; i ++ ) { h . push_back ( i ); } vector < pair < int , int >> res ; res . reserve ( n ); do { res . clear (); memset ( vis , 0 , sizeof ( vis [ 0 ]) * ( n + 1 )); int all_ok = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int ok = 0 ; for ( const auto & d : disVec [ h [ i ]]) { if ( vis [ d . ix ]) { continue ; } res . emplace_back ( make_pair ( h [ i ] + 1 , d . ix + 1 )); vis [ d . ix ] = 1 ; ok = 1 ; break ; } if ( ok == 0 ) { all_ok = 0 ; break ; } } if ( all_ok ) { cout << \"POSSIBLE \\n \" ; for ( const auto & r : res ) { cout << r . first << \" \" << r . second << \" \\n \" ; } return ; } } while ( next_permutation ( h . begin (), h . end ())); cout << \"IMPOSSIBLE \\n \" ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T = 0 ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; } I, O Bot \u9898\u610f\uff1a \u5728\u4e00\u4e2a\u4e00\u7ef4\u5e73\u9762\u4e0a\uff0c\u6709 n n \u4e2a ball\uff0c\u7136\u540e\u4e00\u8f86\u6536\u96c6\u8f66\u4ece 0 0 \u5f00\u59cb\u51fa\u53d1\uff0c\u79fb\u52a8\u4e00\u5355\u4f4d\u9700\u8981\u82b1\u8d39 1 1 \u5355\u4f4d\u7684\u80fd\u91cf\u3002 ball \u6709\u4e24\u79cd\u5f62\u72b6\uff0c 0 \u5f62\u72b6\u548c 1 \u5f62\u72b6\u3002 \u6536\u96c6\u8f66\u4e0a\u6709\u4e24\u4e2a\u5bb9\u5668\uff0c\u5176\u4e2d\u4e00\u4e2a\u5bb9\u5668\u80fd\u88c5 0 \u5f62\u72b6\u7684 ball\uff0c\u53e6\u4e00\u4e2a\u5bb9\u5668\u80fd\u88c5 1 \u5f62\u72b6\u7684 ball\u3002 \u4f46\u662f\u53ef\u4ee5\u82b1\u8d39 C C \u5355\u4f4d\u7684\u80fd\u91cf\u5c06\u4e00\u4e2a\u5f62\u72b6\u7684 ball \u53d8\u6210\u53e6\u5916\u4e00\u4e2a\u5f62\u72b6\u3002 \u6536\u96c6\u4e86 ball \u4e4b\u540e\uff0c\u6536\u96c6\u8f66\u53ef\u4ee5\u56de\u5230 0 0 \u4f4d\u7f6e\u50a8\u5b58\u7403\u3002 \u95ee\u5c06\u6240\u6709\u7403\u90fd\u6536\u96c6\u5230 0 0 \u4f4d\u7f6e\u6700\u5c11\u9700\u8981\u591a\u5c11\u5355\u4f4d\u7684\u80fd\u91cf\uff1f \u601d\u8def\uff1a \u8003\u8651\uff0c\u6b63\u8d1f\u5750\u6807\u8f74\u662f\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u95ee\u9898\uff0c\u5206\u5f00\u505a\u3002 \u5728\u6bd4\u8d5b\u65f6\u60f3\u4e86\u4e2a\u9519\u8bef\u505a\u6cd5\u3002 f_{i, j} f_{i, j} \u8868\u793a\u5904\u7406\u5b8c\u524d i i \u4e2a\u4f4d\u7f6e\uff0c j j \u6709\u4e09\u79cd\u72b6\u6001\uff0c\u5206\u522b\u4e3a 0, 1, 2 0, 1, 2 \u3002 0 0 \u8868\u793a\u8fd8\u5269\u4e00\u4e2a 0 \u5f62\u72b6\u7684 ball \u8fd8\u6ca1\u6536\u96c6\u3002 1 1 \u8868\u793a\u8fd8\u5269\u4e00\u4e2a 1 \u5f62\u72b6\u7684 ball \u8fd8\u6ca1\u6536\u96c6\u3002 2 2 \u8868\u793a\u524d i i \u4e2a ball \u6536\u96c6\u5b8c\u4e86\u3002 \u7136\u540e dp \u5373\u53ef\u3002 \u4f46\u662f\u8fd9\u6837\u4f1a\u53d1\u73b0\u6837\u4f8b\u4e2d\u7684 case2 \u90fd\u8fc7\u4e0d\u4e86\u3002\u56e0\u4e3a\u5b83\u662f\u7559\u4e86\u4e24\u4e2a 0 \u5f62\u72b6\u7684 ball\uff0c\u548c\u540e\u9762\u4e24\u4e2a 1 \u5f62\u72b6\u7684 ball\uff0c\u5206\u522b\u7ec4\u5408\u4e00\u8d77\uff0c\u8fdb\u884c\u4e24\u8d9f\u56de\u6536\u3002 \u95ee\u9898\u53ef\u80fd\u51fa\u5728\u53ea\u7ef4\u62a4\u5269\u4e00\u4e2a 0 / 1 \u5f62\u72b6\u7684 ball \u7684\u72b6\u6001\u53ef\u80fd\u4e0d\u591f\u3002\u4f46\u662f\u5982\u679c\u7ef4\u62a4\u7684\u6570\u91cf\u5927\u4e86\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u53c8\u9876\u4e0d\u4f4f\u3002 Wrong Code #include <bits/stdc++.h> #include <algorithm> #include <cstring> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #include <limits> #include <utility> #include <vector> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } // head const int N = 1e5 + 10 ; int n , C ; struct node { int x ; int v ; bool operator < ( const node & other ) const { return x < other . x ; } }; ll gao ( vector < node > & v ) { int m = v . size (); v . emplace_back ( node { . x = -1 , . v = 0 , }); sort ( v . begin (), v . end ()); vector < vector < ll >> f ( m + 1 , vector < ll > ( 3 , 1l l * 10000 * 1e9 )); f [ 0 ][ 2 ] = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { ll baseCost = 1l l * v [ i ]. x * 2 ; for ( int j = 0 ; j <= 2 ; j ++ ) { f [ i ][ j ] = min ( f [ i ][ j ], f [ i - 1 ][ j ] + baseCost ); } f [ i ][ v [ i ]. v ] = min ( f [ i ][ v [ i ]. v ], f [ i - 1 ][ 2 ]); f [ i ][ 2 ] = min ( f [ i ][ 2 ], f [ i - 1 ][ v [ i ]. v ^ 1 ] + baseCost ); f [ i ][ 2 ] = min ( f [ i ][ 2 ], f [ i - 1 ][ v [ i ]. v ] + baseCost + C ); } return f [ m ][ 2 ]; } void run () { cin >> n >> C ; vector < node > f , g ; for ( int i = 0 ; i < n ; i ++ ) { int x , v ; cin >> x >> v ; if ( x < 0 ) { f . push_back ( node { . x = - x , . v = v , }); } else { g . push_back ( node { . x = x , . v = v , }); } } ll ans = 0 ; ans += gao ( f ); ans += gao ( g ); cout << ans << \" \\n \" ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T = 0 ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; } \u7559\u5751\u3002","title":"Google Code Jam Round 2 2022 Record"},{"location":"2022/5/google-code-jam/round-2-2022/#info","text":"Practice Link Code Repo Link Score: 22 Rank: 1680","title":"Info"},{"location":"2022/5/google-code-jam/round-2-2022/#problems","text":"","title":"Problems"},{"location":"2022/5/google-code-jam/round-2-2022/#spiraling-into-control","text":"\u9898\u610f\uff1a \u7ed9\u51fa\u4e00\u4e2a n \\cdot n n \\cdot n \u7684\u86c7\u5f62\u77e9\u9635\u3002 \u4ece (x_0, y_0) (x_0, y_0) \u80fd\u591f\u5230\u8fbe (x_1, y_1) (x_1, y_1) \uff0c\u5f53\u4e14\u4ec5\u5f53 (x_0, y_0) (x_0, y_0) \u548c (x_1, y_1) (x_1, y_1) \u76f8\u90bb\uff0c\u5e76\u4e14\u5728\u86c7\u5f62\u77e9\u9635\u4e0a (x_1, y_1) (x_1, y_1) \u4e0a\u5bf9\u5e94\u7684\u6570\u5b57\u5927\u4e8e (x_0, y_0) (x_0, y_0) \u4e0a\u5bf9\u5e94\u7684\u6570\u5b57\u3002 \u73b0\u5728\u8981\u6c42\u4ece 1 1 \u8d70\u5230 n \\cdot n n \\cdot n \uff0c\u5e76\u4e14\u6070\u597d\u7528 k k \u6b65\uff0c\u95ee\u662f\u5426\u53ef\u80fd\uff0c\u53ef\u80fd\u7684\u8bdd\uff0c\u7ed9\u51fa\u4e2d\u95f4\u8df3\u8dc3\u7684\u6b65\u9aa4\u3002 \u601d\u8def\uff1a \u731c\u60f3\u4e86\u4e00\u4e0b\uff0c\u5f53\u524d\u8fd9\u4e00\u6b65\u662f\u5426\u9009\u62e9\u8df3\u8dc3\uff0c\u53d6\u51b3\u4e8e\u8df3\u8dc3\u540e\u5269\u4f59\u7684\u6700\u5927\u6b65\u6570\u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u53ef\u7528\u6b65\u6570\uff0c\u662f\u7684\u8bdd\uff0c\u5c31\u8df3\u8dc3\u3002 \u4f46\u662f\u5927 case TLE \u4e86\u3002 Small Case Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #include <utility> #include <vector> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } // #ifdef LOCAL // #include <debug.hpp> // #else // #define dbg(...) // #endif // head const int N = 1e4 + 10 ; int n , k ; int f [ N ][ N ]; int mv [][ 2 ] = {{ 0 , 1 }, { 1 , 0 }, { 0 , -1 }, { -1 , 0 }}; void genG () { int ix = 1 ; int mx = 0 ; int x = 1 , y = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { f [ i ][ j ] = -1 ; } } const auto ok = []( int x , int y ) { if ( x < 1 || x > n || y < 1 || y > n ) { return false ; } if ( f [ x ][ y ] != -1 ) { return false ; } return true ; }; f [ 1 ][ 1 ] = 1 ; while ( ix < n * n ) { ++ ix ; int nx = x + mv [ mx ][ 0 ]; int ny = y + mv [ mx ][ 1 ]; if ( ! ok ( nx , ny )) { mx = ( mx + 1 ) % 4 ; } nx = x + mv [ mx ][ 0 ]; ny = y + mv [ mx ][ 1 ]; x = nx ; y = ny ; f [ x ][ y ] = ix ; } } void printG () { for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { cout << f [ i ][ j ] << \" \\n \" [ j == n ]; } } } struct node { int x , y , v ; bool operator < ( const node & other ) const { return v > other . v ; } }; vector < pair < int , int >> gao () { auto res = vector < pair < int , int >> (); const auto ok = []( int x , int y ) { if ( x < 1 || x > n || y < 1 || y > n ) { return false ; } return true ; }; node cur = { . x = 1 , . y = 1 , . v = 1 , }; int _k = k ; int target = n * n ; while ( _k > 0 ) { vector < node > t ; // cout << cur.x << \" \" << cur.y << \" \" << cur.v << \" \" << _k << \" \" << res.size() << endl; for ( int i = 0 ; i < 4 ; i ++ ) { int nx = cur . x + mv [ i ][ 0 ]; int ny = cur . y + mv [ i ][ 1 ]; if ( ok ( nx , ny ) && f [ nx ][ ny ] > cur . v ) { t . emplace_back ( node { . x = nx , . y = ny , . v = f [ nx ][ ny ], }); } } sort ( t . begin (), t . end ()); int ok = 0 ; for ( const auto & nx : t ) { if ( _k - 1 <= target - nx . v ) { if ( nx . v - cur . v > 1 ) { res . push_back ( make_pair ( cur . v , nx . v )); } cur = nx ; ok = 1 ; break ; } } if ( ok == 0 ) { return vector < pair < int , int >> (); } -- _k ; } if ( cur . v != target ) { return vector < pair < int , int >> (); } return res ; } void run () { cin >> n >> k ; genG (); // printG(); auto res = gao (); if ( res . empty ()) { cout << \"IMPOSSIBLE \\n \" ; } else { cout << res . size () << \" \\n \" ; for ( const auto & it : res ) { cout << it . first << \" \" << it . second << \" \\n \" ; } } } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T = 0 ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; }","title":"Spiraling Into Control"},{"location":"2022/5/google-code-jam/round-2-2022/#pixelated-circle","text":"\u9898\u610f\uff1a \u7ed9\u51fa\u4e24\u79cd\u5728\u77e9\u9635\u4e0a\u300c\u753b\u5706\u300d\u7684\u51fd\u6570\uff0c\u6c42\u4e24\u79cd\u65b9\u5f0f\u753b\u51fa\u6765\u7684\u300c\u9ed1\u70b9\u300d\u7684\u6570\u91cf\u5dee\u5f02\u3002 \u601d\u8def\uff1a \u5c0f case \u5c31\u5c06\u9898\u9762\u4e2d\u7684\u4f2a\u4ee3\u7801\u7ffb\u8bd1\u4e00\u4e0b\uff0c\u7136\u540e\u8dd1\u4e00\u904d\uff0c\u6c42\u4e2a\u6570\u91cf\u7684 diff\u3002 Small Case Code #include <bits/stdc++.h> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } // head const int N = 1e4 + 10 ; int r ; int f [ N ][ N ]; int get_pixel ( int x , int y ) { return f [ x + 100 ][ y + 100 ]; } void set_pixel ( int x , int y , int v = 0 ) { f [ x + 100 ][ y + 100 ] = v ; } void set_pixel_to_black ( int x , int y ) { set_pixel ( x , y , 1 ); } int get_all_pixel () { int res = 0 ; for ( int i = - r ; i <= r ; i ++ ) { for ( int j = - r ; j <= r ; j ++ ) { res += get_pixel ( i , j ); } } return res ; } void init () { for ( int i = - r ; i <= r ; i ++ ) { for ( int j = - r ; j <= r ; j ++ ) { set_pixel ( i , j , 0 ); } } } void draw_circle_perimeter ( int r ) { for ( int x = - r ; x <= r ; x ++ ) { int y = static_cast < int > ( round ( sqrt ( r * r - x * x ))); set_pixel_to_black ( x , y ); set_pixel_to_black ( x , - y ); set_pixel_to_black ( y , x ); set_pixel_to_black ( - y , x ); } } void draw_circle_filled_wrong ( int r ) { for ( int i = 0 ; i <= r ; i ++ ) { draw_circle_perimeter ( i ); } } void draw_circle_filled ( int r ) { for ( int i = - r ; i <= r ; i ++ ) { for ( int j = - r ; j <= r ; j ++ ) { int x = static_cast < int > ( round ( sqrt ( i * i + j * j ))); if ( x <= r ) { set_pixel_to_black ( i , j ); } } } } void run () { cin >> r ; init (); draw_circle_filled ( r ); int a = get_all_pixel (); init (); draw_circle_filled_wrong ( r ); int b = get_all_pixel (); cout << abs ( a - b ) << endl ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T = 0 ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; }","title":"Pixelated Circle"},{"location":"2022/5/google-code-jam/round-2-2022/#saving-the-jelly","text":"\u9898\u610f\uff1a \u5728\u4e00\u4e2a\u8db3\u7403\u573a\u4e0a\uff0c\u6709 n n \u4e2a\u4eba\uff0c n + 1 n + 1 \u4e2a\u7cd6\u679c\u3002 \u7b2c i i \u4e2a\u4eba\u7684\u4f4d\u7f6e\u662f (x_i, y_i) (x_i, y_i) \u3002 \u7b2c j j \u4e2a\u7cd6\u679c\u7684\u4f4d\u7f6e\u662f (x_j, y_j) (x_j, y_j) \u3002 \u73b0\u5728\u6709\u4e2a\u6559\u7ec3\uff0c\u6bcf\u6b21\u53ef\u4ee5\u6307\u5b9a\u7b2c i i \u4e2a\u4eba\u53bb\u62ff\u7cd6\u679c\uff0c\u8fd9\u4e2a\u4eba\u53ea\u80fd\u9009\u62e9\u79bb\u81ea\u5df1\u6700\u8fd1\u7684\u4e00\u9897\u7cd6\u679c\uff0c\u5982\u679c\u6709\u591a\u9897\u7cd6\u679c\u79bb\u81ea\u5df1\u6700\u8fd1\uff0c\u90a3\u4e48\u7531\u6559\u7ec3\u6307\u5b9a\u4ed6\u62ff\u53d6\u54ea\u4e00\u9897\u3002 \u95ee\uff0c\u6709\u6ca1\u6709\u65b9\u6848\uff0c\u4f7f\u5f97\u6807\u53f7\u4e3a 0 0 \u7684\u7cd6\u679c\uff0c\u6700\u540e\u4e0d\u88ab\u62ff\u8d70\uff1f \u601d\u8def\uff1a \u9488\u5bf9\u5c0f case\uff1a \u5168\u6392\u5217\u679a\u4e3e\u4eba\u62ff\u7684\u987a\u5e8f\uff0c\u7136\u540e\u66b4\u529b check\u3002 check \u7684\u65f6\u5019\uff0c\u5982\u679c\u67d0\u4e2a\u4eba\u5728\u8f6e\u5230\u65f6\u6709\u591a\u4e2a\u5019\u9009\u7cd6\u679c\uff0c\u600e\u4e48\u529e\uff1f \u53ea\u8981\u4e0d\u53d6 0 0 \uff0c\u5176\u5b83\u968f\u4fbf\u53d6\u3002 \u56e0\u4e3a\u5982\u679c\u5b58\u5728\u8fd9\u4e2a\u4eba\u4e00\u5b9a\u5f97\u53d6\u67d0\u4e00\u9897\u7cd6\u679c\uff0c\u90a3\u4e48\u6700\u540e\u65b9\u6848\u624d\u80fd\u8dd1\u901a\u7684\u8bdd\uff0c\u90a3\u4e48\u80af\u5b9a\u6709\u53e6\u4e00\u79cd\u6392\u5217\u4f7f\u5f97\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u4eba\u5728\u524d\u9762\u53d6\u8d70\u4ed6\u6240\u9700\u7684\u7cd6\u679c\u3002 Small Case Code #include <bits/stdc++.h> #include <algorithm> #include <cstring> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #include <limits> #include <utility> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } // head int n , vis [ 12 ]; long long calcDis ( int x , int y , int nx , int ny ) { return 1l l * ( x - nx ) * ( x - nx ) + 1l l * ( y - ny ) * ( y - ny ); } ll dis [ 30 ][ 30 ]; struct node { int ix ; long long dis ; bool operator < ( const node & other ) const { if ( dis == other . dis ) { return ix > other . ix ; } return dis < other . dis ; } }; vector < node > disVec [ 15 ]; void run () { cin >> n ; vector < pair < int , int >> f , g ; for ( int i = 0 ; i < n ; i ++ ) { int x , y ; cin >> x >> y ; f . push_back ( make_pair ( x , y )); } for ( int i = 0 ; i < n + 1 ; i ++ ) { int x , y ; cin >> x >> y ; g . push_back ( make_pair ( x , y )); } for ( int i = 0 ; i < n ; i ++ ) { disVec [ i ]. clear (); for ( int j = 0 ; j < n + 1 ; j ++ ) { dis [ i ][ j ] = calcDis ( f [ i ]. first , f [ i ]. second , g [ j ]. first , g [ j ]. second ); disVec [ i ]. push_back ( node { . ix = j , . dis = dis [ i ][ j ], }); } sort ( disVec [ i ]. begin (), disVec [ i ]. end ()); while ( ! disVec [ i ]. empty () && disVec [ i ]. back (). ix != 0 ) { disVec [ i ]. pop_back (); } disVec [ i ]. pop_back (); if ( disVec [ i ]. empty ()) { cout << \"IMPOSSIBLE \\n \" ; return ; } } vector < int > h ; h . reserve ( n ); for ( int i = 0 ; i < n ; i ++ ) { h . push_back ( i ); } vector < pair < int , int >> res ; res . reserve ( n ); do { res . clear (); memset ( vis , 0 , sizeof ( vis [ 0 ]) * ( n + 1 )); int all_ok = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int ok = 0 ; for ( const auto & d : disVec [ h [ i ]]) { if ( vis [ d . ix ]) { continue ; } res . emplace_back ( make_pair ( h [ i ] + 1 , d . ix + 1 )); vis [ d . ix ] = 1 ; ok = 1 ; break ; } if ( ok == 0 ) { all_ok = 0 ; break ; } } if ( all_ok ) { cout << \"POSSIBLE \\n \" ; for ( const auto & r : res ) { cout << r . first << \" \" << r . second << \" \\n \" ; } return ; } } while ( next_permutation ( h . begin (), h . end ())); cout << \"IMPOSSIBLE \\n \" ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T = 0 ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; }","title":"Saving the Jelly"},{"location":"2022/5/google-code-jam/round-2-2022/#i-o-bot","text":"\u9898\u610f\uff1a \u5728\u4e00\u4e2a\u4e00\u7ef4\u5e73\u9762\u4e0a\uff0c\u6709 n n \u4e2a ball\uff0c\u7136\u540e\u4e00\u8f86\u6536\u96c6\u8f66\u4ece 0 0 \u5f00\u59cb\u51fa\u53d1\uff0c\u79fb\u52a8\u4e00\u5355\u4f4d\u9700\u8981\u82b1\u8d39 1 1 \u5355\u4f4d\u7684\u80fd\u91cf\u3002 ball \u6709\u4e24\u79cd\u5f62\u72b6\uff0c 0 \u5f62\u72b6\u548c 1 \u5f62\u72b6\u3002 \u6536\u96c6\u8f66\u4e0a\u6709\u4e24\u4e2a\u5bb9\u5668\uff0c\u5176\u4e2d\u4e00\u4e2a\u5bb9\u5668\u80fd\u88c5 0 \u5f62\u72b6\u7684 ball\uff0c\u53e6\u4e00\u4e2a\u5bb9\u5668\u80fd\u88c5 1 \u5f62\u72b6\u7684 ball\u3002 \u4f46\u662f\u53ef\u4ee5\u82b1\u8d39 C C \u5355\u4f4d\u7684\u80fd\u91cf\u5c06\u4e00\u4e2a\u5f62\u72b6\u7684 ball \u53d8\u6210\u53e6\u5916\u4e00\u4e2a\u5f62\u72b6\u3002 \u6536\u96c6\u4e86 ball \u4e4b\u540e\uff0c\u6536\u96c6\u8f66\u53ef\u4ee5\u56de\u5230 0 0 \u4f4d\u7f6e\u50a8\u5b58\u7403\u3002 \u95ee\u5c06\u6240\u6709\u7403\u90fd\u6536\u96c6\u5230 0 0 \u4f4d\u7f6e\u6700\u5c11\u9700\u8981\u591a\u5c11\u5355\u4f4d\u7684\u80fd\u91cf\uff1f \u601d\u8def\uff1a \u8003\u8651\uff0c\u6b63\u8d1f\u5750\u6807\u8f74\u662f\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u95ee\u9898\uff0c\u5206\u5f00\u505a\u3002 \u5728\u6bd4\u8d5b\u65f6\u60f3\u4e86\u4e2a\u9519\u8bef\u505a\u6cd5\u3002 f_{i, j} f_{i, j} \u8868\u793a\u5904\u7406\u5b8c\u524d i i \u4e2a\u4f4d\u7f6e\uff0c j j \u6709\u4e09\u79cd\u72b6\u6001\uff0c\u5206\u522b\u4e3a 0, 1, 2 0, 1, 2 \u3002 0 0 \u8868\u793a\u8fd8\u5269\u4e00\u4e2a 0 \u5f62\u72b6\u7684 ball \u8fd8\u6ca1\u6536\u96c6\u3002 1 1 \u8868\u793a\u8fd8\u5269\u4e00\u4e2a 1 \u5f62\u72b6\u7684 ball \u8fd8\u6ca1\u6536\u96c6\u3002 2 2 \u8868\u793a\u524d i i \u4e2a ball \u6536\u96c6\u5b8c\u4e86\u3002 \u7136\u540e dp \u5373\u53ef\u3002 \u4f46\u662f\u8fd9\u6837\u4f1a\u53d1\u73b0\u6837\u4f8b\u4e2d\u7684 case2 \u90fd\u8fc7\u4e0d\u4e86\u3002\u56e0\u4e3a\u5b83\u662f\u7559\u4e86\u4e24\u4e2a 0 \u5f62\u72b6\u7684 ball\uff0c\u548c\u540e\u9762\u4e24\u4e2a 1 \u5f62\u72b6\u7684 ball\uff0c\u5206\u522b\u7ec4\u5408\u4e00\u8d77\uff0c\u8fdb\u884c\u4e24\u8d9f\u56de\u6536\u3002 \u95ee\u9898\u53ef\u80fd\u51fa\u5728\u53ea\u7ef4\u62a4\u5269\u4e00\u4e2a 0 / 1 \u5f62\u72b6\u7684 ball \u7684\u72b6\u6001\u53ef\u80fd\u4e0d\u591f\u3002\u4f46\u662f\u5982\u679c\u7ef4\u62a4\u7684\u6570\u91cf\u5927\u4e86\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u53c8\u9876\u4e0d\u4f4f\u3002 Wrong Code #include <bits/stdc++.h> #include <algorithm> #include <cstring> #include <ext/pb_ds/assoc_container.hpp> #include <ext/pb_ds/tree_policy.hpp> #include <limits> #include <utility> #include <vector> #define endl \"\\n\" #define fi first #define se second #define all(x) begin(x), end(x) #define rall rbegin(a), rend(a) #define bitcnt(x) (__builtin_popcountll(x)) #define complete_unique(a) a.erase(unique(begin(a), end(a)), end(a)) #define mst(x, a) memset(x, a, sizeof(x)) #define MP make_pair using ll = long long ; using ull = unsigned long long ; using db = double ; using ld = long double ; using VLL = std :: vector < ll > ; using VI = std :: vector < int > ; using PII = std :: pair < int , int > ; using PLL = std :: pair < ll , ll > ; using namespace __gnu_pbds ; using namespace std ; template < typename T > using ordered_set = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update > ; template < typename T , typename S > inline bool chmax ( T & a , const S & b ) { return a < b ? a = b , 1 : 0 ; } template < typename T , typename S > inline bool chmin ( T & a , const S & b ) { return a > b ? a = b , 1 : 0 ; } // head const int N = 1e5 + 10 ; int n , C ; struct node { int x ; int v ; bool operator < ( const node & other ) const { return x < other . x ; } }; ll gao ( vector < node > & v ) { int m = v . size (); v . emplace_back ( node { . x = -1 , . v = 0 , }); sort ( v . begin (), v . end ()); vector < vector < ll >> f ( m + 1 , vector < ll > ( 3 , 1l l * 10000 * 1e9 )); f [ 0 ][ 2 ] = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { ll baseCost = 1l l * v [ i ]. x * 2 ; for ( int j = 0 ; j <= 2 ; j ++ ) { f [ i ][ j ] = min ( f [ i ][ j ], f [ i - 1 ][ j ] + baseCost ); } f [ i ][ v [ i ]. v ] = min ( f [ i ][ v [ i ]. v ], f [ i - 1 ][ 2 ]); f [ i ][ 2 ] = min ( f [ i ][ 2 ], f [ i - 1 ][ v [ i ]. v ^ 1 ] + baseCost ); f [ i ][ 2 ] = min ( f [ i ][ 2 ], f [ i - 1 ][ v [ i ]. v ] + baseCost + C ); } return f [ m ][ 2 ]; } void run () { cin >> n >> C ; vector < node > f , g ; for ( int i = 0 ; i < n ; i ++ ) { int x , v ; cin >> x >> v ; if ( x < 0 ) { f . push_back ( node { . x = - x , . v = v , }); } else { g . push_back ( node { . x = x , . v = v , }); } } ll ans = 0 ; ans += gao ( f ); ans += gao ( g ); cout << ans << \" \\n \" ; } int main () { ios :: sync_with_stdio ( false ); cin . tie ( nullptr ); cout . tie ( nullptr ); cout << fixed << setprecision ( 20 ); int _T = 0 ; cin >> _T ; for ( int i = 1 ; i <= _T ; ++ i ) { cout << \"Case #\" << i << \": \" ; run (); } return 0 ; } \u7559\u5751\u3002","title":"I, O Bot"},{"location":"2022/5/how-to-manage-multiple-git-accounts/","text":"How to manage multiple git accounts Write in front \u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u9700\u8981\u7528\u4e00\u4e2a git \u8d26\u53f7\u5c31\u53ef\u4ee5\u6ee1\u8db3\u5f00\u53d1\u9700\u6c42\u3002 \u4f46\u662f\u5728\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u9700\u8981\u540c\u65f6\u5728\u51e0\u4e2a git \u8d26\u53f7\u4e4b\u95f4\u5207\u6362\uff0c\u6ee1\u8db3\u4e0d\u540c\u9879\u76ee\u7684\u5f00\u53d1\u9700\u6c42\u3002 \u8b6c\u5982\uff1a GitHub \u4e2d\u9700\u8981\u5f00\u53d1\u4e00\u4e9b\u5f00\u6e90\u9879\u76ee\uff0c\u7528\u7684\u662f\u81ea\u5df1\u7684\u4e2a\u4eba\u90ae\u7bb1\u3002 \u5728\u5b66\u6821\u7684\u5b9e\u9a8c\u5ba4\u91cc\u9700\u8981\u5f00\u53d1\u4e00\u4e9b\u5b9e\u9a8c\u5ba4\u7684\u9879\u76ee\uff0c\u800c\u5b9e\u9a8c\u5ba4\u53c8\u81ea\u5df1\u642d\u5efa\u4e86 GitLab\uff0c\u90a3\u4e48\u53c8\u6709\u4e00\u4e2a\u8d26\u53f7\uff0c\u53ef\u80fd\u7528\u7684\u662f\u5b66\u6821\u7684 edu \u540e\u7f00\u90ae\u7bb1\u3002 \u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5982\u4f55\u5728\u81ea\u5df1\u7684\u591a\u4e2a git \u8d26\u53f7\u95f4\u4e1d\u6ed1\u5207\u6362\u5c31\u53d8\u5f97\u6bd4\u8f83\u91cd\u8981\u3002 My solution \u9996\u5148\u5047\u5b9a\u6211\u6709\u4e24\u4e2a\u8d26\u53f7\u3002 \u4e00\u4e2a\u662f GitHub \u8d26\u53f7\uff0c\u5177\u4f53\u4fe1\u606f\u5982\u4e0b\uff1a .gitconfig.dup4 [user] name = Dup4 email = git@dup4.com \u53e6\u4e00\u4e2a\u662f GitLab \u8d26\u53f7\uff0c\u5177\u4f53\u4fe1\u606f\u5982\u4e0b\uff1a .gitconfig.panlyuzhi [user] name = panlyuzhi email = panlyuzhi@hznu.edu.cn Authentication \u9996\u5148\u662f\u9274\u6743\uff0c\u5bf9\u4e8e GitHub \u6216\u662f GitLab\uff0c\u5982\u679c\u8981 push \u6216\u8005\u62c9\u53d6\u79c1\u6709\u4ed3\u5e93\u7b49\uff0c\u90a3\u4e48\u90fd\u9700\u8981\u9274\u6743\u3002 \u6211\u4e2a\u4eba\u6bd4\u8f83\u503e\u5411\u4e8e ssh \u9274\u6743\uff0c \u6211\u4f1a\u751f\u6210\u4e24\u5957 SSH key\uff0c\u4e00\u5957\u7528\u4e8e GitHub\uff0c\u53e6\u4e00\u5957\u7528\u4e8e GitLab\u3002 \u81f3\u4e8e\u5982\u4f55\u751f\u6210 SSH key\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06 SSH key \u6dfb\u52a0\u5230 GitHub/GitLab\uff0c\u53ef\u4ee5\u53c2\u8003 GitHub \u6587\u6863 \u3002 Configuration \u5bf9\u4e8e\u914d\u7f6e\uff0c\u6211\u4f1a\u5728 $HOME \u76ee\u5f55\u4e0b\uff0c\u751f\u6210\u4e24\u5957\u914d\u7f6e\uff0c\u547d\u540d\u4e3a\uff1a .gitconfig.dup4 .gitconfig.panlyuzhi Switch between accounts \u90a3\u4e48\u5bf9\u4e8e\u8d26\u53f7\u95f4\u7684\u5207\u6362\uff0c\u6211\u4f1a\u5728 ~/.bashrc \u4e2d\uff0c\u5199\u4e0b\u4e00\u4e2a\u51fd\u6570\u3002 function change_git () { target = \" ${ 1 } \" if [[ -z \" ${ target } \" ]] ; then echo \"current: $( git config user.name ) \" return fi echo \"before: $( git config user.name ) \" cp ~/.gitconfig. \" ${ target } \" ~/.gitconfig ssh-add -d ~/.ssh/id_rsa_dup4 ssh-add -d ~/.ssh/id_rsa_panlyuzhi ssh-add ~/.ssh/id_rsa_ \" ${ target } \" echo \"after: $( git config user.name ) \" } \u8fd9\u4e2a\u51fd\u6570\uff0c\u4e3b\u8981\u5e72\u4e86\u4ee5\u4e0b\u4e8b\u60c5\uff1a \u5c06\u6307\u5b9a\u8d26\u53f7\u7684 .gitconfig.${target} \u62f7\u8d1d\u5230 ~/.gitconfig \u3002 \u6e05\u7a7a ssh-agent \u4e2d\u6258\u7ba1\u7684 ssh \u79c1\u94a5\uff0c\u5e76\u5c06\u6307\u5b9a\u8d26\u53f7\u7684 SSH \u79c1\u94a5\u52a0\u5165\u5230 ssh-agent\u3002 \u8f93\u51fa\u76f8\u5173 log\u3002 PS: \u5982\u679c\u8981\u542f\u7528 ssh-agent\uff0c\u53ef\u80fd\u9700\u8981\u5728\u542f\u52a8 terminal \u7684\u65f6\u5019\uff0c\u6267\u884c\u4e00\u4e0b eval \"$(ssh-agent -s)\" >/dev/null \uff0c\u5e38\u7528\u7684\u505a\u6cd5\u662f\u5c06\u5b83\u52a0\u5165\u5230 ~/.bashrc \u6216 ~/.zshrc \u4e2d\u3002 Actual operation \u90a3\u4e48\u5982\u679c\u6211\u8981\u5207\u6362 git \u8d26\u53f7\uff0c\u90a3\u4e48\u6211\u53ea\u9700\u8981\u5728 terminal \u4e2d\u8f93\u5165 change_git dup4 \u6216\u8005 change_git panlyuzhi \u5373\u53ef\u3002 \u5982\u679c\u4f60\u4ed4\u7ec6\u89c2\u5bdf\u4e0a\u9762\u90a3\u4e2a\u51fd\u6570\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u4e0d\u4f20\u5165\u53c2\u6570\uff0c\u76f4\u63a5\u6267\u884c change_git \uff0c\u90a3\u4e48\u4f1a\u663e\u793a\u5f53\u524d\u6b63\u5728\u4f7f\u7528\u7684 git \u8d26\u53f7\u3002 \u5f53\u7136\uff0c\u6211\u662f\u4e00\u4e2a\u5f88\u61d2\u7684\u4eba\uff0c\u6240\u4ee5\u6211\u53d7\u4e0d\u4e86 change_git \u90a3\u4e48\u957f\u7684\u547d\u4ee4\uff0c\u6240\u4ee5\u6211\u4f1a\u5728\u6211\u7684 ~/.bashrc \u4e2d\u52a0\u4e00\u4e2a alias cg=change_git \u3002","title":"How to manage multiple git accounts"},{"location":"2022/5/how-to-manage-multiple-git-accounts/#write-in-front","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u9700\u8981\u7528\u4e00\u4e2a git \u8d26\u53f7\u5c31\u53ef\u4ee5\u6ee1\u8db3\u5f00\u53d1\u9700\u6c42\u3002 \u4f46\u662f\u5728\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u9700\u8981\u540c\u65f6\u5728\u51e0\u4e2a git \u8d26\u53f7\u4e4b\u95f4\u5207\u6362\uff0c\u6ee1\u8db3\u4e0d\u540c\u9879\u76ee\u7684\u5f00\u53d1\u9700\u6c42\u3002 \u8b6c\u5982\uff1a GitHub \u4e2d\u9700\u8981\u5f00\u53d1\u4e00\u4e9b\u5f00\u6e90\u9879\u76ee\uff0c\u7528\u7684\u662f\u81ea\u5df1\u7684\u4e2a\u4eba\u90ae\u7bb1\u3002 \u5728\u5b66\u6821\u7684\u5b9e\u9a8c\u5ba4\u91cc\u9700\u8981\u5f00\u53d1\u4e00\u4e9b\u5b9e\u9a8c\u5ba4\u7684\u9879\u76ee\uff0c\u800c\u5b9e\u9a8c\u5ba4\u53c8\u81ea\u5df1\u642d\u5efa\u4e86 GitLab\uff0c\u90a3\u4e48\u53c8\u6709\u4e00\u4e2a\u8d26\u53f7\uff0c\u53ef\u80fd\u7528\u7684\u662f\u5b66\u6821\u7684 edu \u540e\u7f00\u90ae\u7bb1\u3002 \u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5982\u4f55\u5728\u81ea\u5df1\u7684\u591a\u4e2a git \u8d26\u53f7\u95f4\u4e1d\u6ed1\u5207\u6362\u5c31\u53d8\u5f97\u6bd4\u8f83\u91cd\u8981\u3002","title":"Write in front"},{"location":"2022/5/how-to-manage-multiple-git-accounts/#my-solution","text":"\u9996\u5148\u5047\u5b9a\u6211\u6709\u4e24\u4e2a\u8d26\u53f7\u3002 \u4e00\u4e2a\u662f GitHub \u8d26\u53f7\uff0c\u5177\u4f53\u4fe1\u606f\u5982\u4e0b\uff1a .gitconfig.dup4 [user] name = Dup4 email = git@dup4.com \u53e6\u4e00\u4e2a\u662f GitLab \u8d26\u53f7\uff0c\u5177\u4f53\u4fe1\u606f\u5982\u4e0b\uff1a .gitconfig.panlyuzhi [user] name = panlyuzhi email = panlyuzhi@hznu.edu.cn","title":"My solution"},{"location":"2022/5/how-to-manage-multiple-git-accounts/#authentication","text":"\u9996\u5148\u662f\u9274\u6743\uff0c\u5bf9\u4e8e GitHub \u6216\u662f GitLab\uff0c\u5982\u679c\u8981 push \u6216\u8005\u62c9\u53d6\u79c1\u6709\u4ed3\u5e93\u7b49\uff0c\u90a3\u4e48\u90fd\u9700\u8981\u9274\u6743\u3002 \u6211\u4e2a\u4eba\u6bd4\u8f83\u503e\u5411\u4e8e ssh \u9274\u6743\uff0c \u6211\u4f1a\u751f\u6210\u4e24\u5957 SSH key\uff0c\u4e00\u5957\u7528\u4e8e GitHub\uff0c\u53e6\u4e00\u5957\u7528\u4e8e GitLab\u3002 \u81f3\u4e8e\u5982\u4f55\u751f\u6210 SSH key\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06 SSH key \u6dfb\u52a0\u5230 GitHub/GitLab\uff0c\u53ef\u4ee5\u53c2\u8003 GitHub \u6587\u6863 \u3002","title":"Authentication"},{"location":"2022/5/how-to-manage-multiple-git-accounts/#configuration","text":"\u5bf9\u4e8e\u914d\u7f6e\uff0c\u6211\u4f1a\u5728 $HOME \u76ee\u5f55\u4e0b\uff0c\u751f\u6210\u4e24\u5957\u914d\u7f6e\uff0c\u547d\u540d\u4e3a\uff1a .gitconfig.dup4 .gitconfig.panlyuzhi","title":"Configuration"},{"location":"2022/5/how-to-manage-multiple-git-accounts/#switch-between-accounts","text":"\u90a3\u4e48\u5bf9\u4e8e\u8d26\u53f7\u95f4\u7684\u5207\u6362\uff0c\u6211\u4f1a\u5728 ~/.bashrc \u4e2d\uff0c\u5199\u4e0b\u4e00\u4e2a\u51fd\u6570\u3002 function change_git () { target = \" ${ 1 } \" if [[ -z \" ${ target } \" ]] ; then echo \"current: $( git config user.name ) \" return fi echo \"before: $( git config user.name ) \" cp ~/.gitconfig. \" ${ target } \" ~/.gitconfig ssh-add -d ~/.ssh/id_rsa_dup4 ssh-add -d ~/.ssh/id_rsa_panlyuzhi ssh-add ~/.ssh/id_rsa_ \" ${ target } \" echo \"after: $( git config user.name ) \" } \u8fd9\u4e2a\u51fd\u6570\uff0c\u4e3b\u8981\u5e72\u4e86\u4ee5\u4e0b\u4e8b\u60c5\uff1a \u5c06\u6307\u5b9a\u8d26\u53f7\u7684 .gitconfig.${target} \u62f7\u8d1d\u5230 ~/.gitconfig \u3002 \u6e05\u7a7a ssh-agent \u4e2d\u6258\u7ba1\u7684 ssh \u79c1\u94a5\uff0c\u5e76\u5c06\u6307\u5b9a\u8d26\u53f7\u7684 SSH \u79c1\u94a5\u52a0\u5165\u5230 ssh-agent\u3002 \u8f93\u51fa\u76f8\u5173 log\u3002 PS: \u5982\u679c\u8981\u542f\u7528 ssh-agent\uff0c\u53ef\u80fd\u9700\u8981\u5728\u542f\u52a8 terminal \u7684\u65f6\u5019\uff0c\u6267\u884c\u4e00\u4e0b eval \"$(ssh-agent -s)\" >/dev/null \uff0c\u5e38\u7528\u7684\u505a\u6cd5\u662f\u5c06\u5b83\u52a0\u5165\u5230 ~/.bashrc \u6216 ~/.zshrc \u4e2d\u3002","title":"Switch between accounts"},{"location":"2022/5/how-to-manage-multiple-git-accounts/#actual-operation","text":"\u90a3\u4e48\u5982\u679c\u6211\u8981\u5207\u6362 git \u8d26\u53f7\uff0c\u90a3\u4e48\u6211\u53ea\u9700\u8981\u5728 terminal \u4e2d\u8f93\u5165 change_git dup4 \u6216\u8005 change_git panlyuzhi \u5373\u53ef\u3002 \u5982\u679c\u4f60\u4ed4\u7ec6\u89c2\u5bdf\u4e0a\u9762\u90a3\u4e2a\u51fd\u6570\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u4e0d\u4f20\u5165\u53c2\u6570\uff0c\u76f4\u63a5\u6267\u884c change_git \uff0c\u90a3\u4e48\u4f1a\u663e\u793a\u5f53\u524d\u6b63\u5728\u4f7f\u7528\u7684 git \u8d26\u53f7\u3002 \u5f53\u7136\uff0c\u6211\u662f\u4e00\u4e2a\u5f88\u61d2\u7684\u4eba\uff0c\u6240\u4ee5\u6211\u53d7\u4e0d\u4e86 change_git \u90a3\u4e48\u957f\u7684\u547d\u4ee4\uff0c\u6240\u4ee5\u6211\u4f1a\u5728\u6211\u7684 ~/.bashrc \u4e2d\u52a0\u4e00\u4e2a alias cg=change_git \u3002","title":"Actual operation"},{"location":"2022/6/deploy-domjudge-with-docker/","text":"Deploy DOMjudge with Docker MariaDB #! /bin/bash TOP_DIR = \" $( dirname \" $( realpath \" ${ BASH_SOURCE [0] } \" ) \" ) \" TAG = \"10.8.3\" docker run \\ -d \\ --restart = always \\ --hostname = mysql \\ --name = dj-mariadb \\ -e TZ = Asia/Shanghai \\ -e MYSQL_USER = domjudge \\ -e MYSQL_ROOT_PASSWORD = ${ root password } \\ -e MYSQL_DATABASE = domjudge \\ -e MYSQL_PASSWORD = ${ password for domjudge user } \\ -p 3306 :3306 \\ -v \" ${ TOP_DIR } \" /mariadb-data:/var/lib/mysql \\ mariadb: ${ TAG } \\ --max-connections = 1000 \\ --max_allowed_packet = 268435456 \\ --innodb_log_file_size = 1073741824 DOMserver #! /bin/bash TOP_DIR = \" $( dirname \" $( realpath \" ${ BASH_SOURCE [0] } \" ) \" ) \" TAG = \"latest\" docker run \\ --link mariadb:mariadb \\ -d \\ --restart = always \\ -e TZ = Asia/Shanghai \\ -e WEBAPP_BASEURL = /domjudge \\ -e TRUSTED_PROXIES = 127 .0.0.1,172.17.0.1 \\ -e MYSQL_HOST = mariadb \\ -e MYSQL_DATABASE = domjudge \\ -e MYSQL_USER = domjudge \\ -e MYSQL_PASSWORD = ${ password for domjudge user } \\ -e MYSQL_ROOT_PASSWORD = ${ root password } \\ -v \" ${ TOP_DIR } \" /data/images/affiliations:/opt/domjudge/domserver/webapp/public/images/affiliations \\ -p 8101 :80 \\ --name domserver \\ dup4/domjudge-domserver: \" ${ TAG } \" JudgeHost #! /bin/bash ID = \" ${ 1 } \" DAEMON_ID = \" ${ 2 } \" PASSWORD = \" ${ 3 } \" TAG = \"latest\" docker run \\ -d \\ --restart = always \\ --privileged \\ -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\ --name judgehost- \" ${ ID } \" \\ --hostname judgedaemon- \" ${ ID } \" \\ -e TZ = Asia/Shanghai \\ -e DAEMON_ID = \" ${ DAEMON_ID } \" \\ -e JUDGEDAEMON_PASSWORD = \" ${ PASSWORD } \" \\ -e DOMSERVER_BASEURL = http://127.0.0.1/domjudge/ \\ dup4/domjudge-judgehost: \" ${ TAG } \"","title":"Deploy DOMjudge with Docker"},{"location":"2022/6/deploy-domjudge-with-docker/#mariadb","text":"#! /bin/bash TOP_DIR = \" $( dirname \" $( realpath \" ${ BASH_SOURCE [0] } \" ) \" ) \" TAG = \"10.8.3\" docker run \\ -d \\ --restart = always \\ --hostname = mysql \\ --name = dj-mariadb \\ -e TZ = Asia/Shanghai \\ -e MYSQL_USER = domjudge \\ -e MYSQL_ROOT_PASSWORD = ${ root password } \\ -e MYSQL_DATABASE = domjudge \\ -e MYSQL_PASSWORD = ${ password for domjudge user } \\ -p 3306 :3306 \\ -v \" ${ TOP_DIR } \" /mariadb-data:/var/lib/mysql \\ mariadb: ${ TAG } \\ --max-connections = 1000 \\ --max_allowed_packet = 268435456 \\ --innodb_log_file_size = 1073741824","title":"MariaDB"},{"location":"2022/6/deploy-domjudge-with-docker/#domserver","text":"#! /bin/bash TOP_DIR = \" $( dirname \" $( realpath \" ${ BASH_SOURCE [0] } \" ) \" ) \" TAG = \"latest\" docker run \\ --link mariadb:mariadb \\ -d \\ --restart = always \\ -e TZ = Asia/Shanghai \\ -e WEBAPP_BASEURL = /domjudge \\ -e TRUSTED_PROXIES = 127 .0.0.1,172.17.0.1 \\ -e MYSQL_HOST = mariadb \\ -e MYSQL_DATABASE = domjudge \\ -e MYSQL_USER = domjudge \\ -e MYSQL_PASSWORD = ${ password for domjudge user } \\ -e MYSQL_ROOT_PASSWORD = ${ root password } \\ -v \" ${ TOP_DIR } \" /data/images/affiliations:/opt/domjudge/domserver/webapp/public/images/affiliations \\ -p 8101 :80 \\ --name domserver \\ dup4/domjudge-domserver: \" ${ TAG } \"","title":"DOMserver"},{"location":"2022/6/deploy-domjudge-with-docker/#judgehost","text":"#! /bin/bash ID = \" ${ 1 } \" DAEMON_ID = \" ${ 2 } \" PASSWORD = \" ${ 3 } \" TAG = \"latest\" docker run \\ -d \\ --restart = always \\ --privileged \\ -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\ --name judgehost- \" ${ ID } \" \\ --hostname judgedaemon- \" ${ ID } \" \\ -e TZ = Asia/Shanghai \\ -e DAEMON_ID = \" ${ DAEMON_ID } \" \\ -e JUDGEDAEMON_PASSWORD = \" ${ PASSWORD } \" \\ -e DOMSERVER_BASEURL = http://127.0.0.1/domjudge/ \\ dup4/domjudge-judgehost: \" ${ TAG } \"","title":"JudgeHost"},{"location":"2022/8/a-quick-word-about-nohup/","text":"\u7b80\u5355\u8bf4\u8bf4 nohup nohup \u662f Linux \u4e2d\u7684\u4e00\u4e2a\u547d\u4ee4\u3002\u6211\u4eec\u53ef\u4ee5\u4ece Man Page \u4e2d\u770b\u5230\u8be5\u547d\u4ee4\u7684\u4f7f\u7528\u5e2e\u52a9\u3002 \u5176\u5b9e\u6211\u81ea\u5df1\u4ee5\u524d\u7406\u89e3\u4e00\u76f4\u4e0d\u6e05\u6670\uff0c\u4e00\u76f4\u4ee5\u4e3a nohup \u662f\u7528\u6765\u8ba9\u4e00\u4e2a\u7a0b\u5e8f\u540e\u53f0\u8fd0\u884c\u7684\u547d\u4ee4\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u63cf\u8ff0\u5e76\u4e0d\u51c6\u786e\u3002 \u6211\u4eec\u7528\u4e00\u4e2a\u7b80\u5355\u7684 Python 3 \u4f5c\u4e3a\u8981\u8fd0\u884c\u7684\u811a\u672c\uff1a import time a = [ \"a\" ] print ( a [ 0 ]) time . sleep ( 10 ) print ( a [ 1 ]) \u8fd9\u4e2a\u811a\u672c\u5f88\u7b80\u5355\uff0c\u4f1a\u8f93\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a a Traceback (most recent call last): File \"/Users/dup4/code/a.py\", line 6, in <module> print(a[1]) IndexError: list index out of range \u5176\u4e2d\u7b2c\u4e00\u884c\u7684 a \u5c5e\u4e8e stdout \uff08\u6807\u51c6\u8f93\u51fa\uff09\uff0c\u5269\u4e0b\u7684\u5c5e\u4e8e stderr \uff08\u6807\u51c6\u9519\u8bef\u8f93\u51fa\uff09\u3002 \u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u547d\u4ee4\uff1a python3 a.py & & \u8868\u793a\u540e\u53f0\u8fd0\u884c\u4e00\u4e2a\u547d\u4ee4\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u91cd\u5b9a\u5411\u8f93\u51fa\uff0c\u5b83\u4ecd\u7136\u4f1a\u8f93\u51fa\u5230\u4f60\u7684\u5c4f\u5e55\u4e0a\uff0c\u5373 stdout \u548c stderr \u3002 \u6709\u5174\u8da3\u6df1\u5165\u4e86\u89e3\u53ef\u4ee5\u770b\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff1a https://stackoverflow.com/questions/13338870/what-does-at-the-end-of-a-linux-command-mean \u5e76\u4e14\u5982\u679c\u53ea\u7528 & \u7684\u8bdd\uff0c\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u9000\u51fa\u4e86\u5f53\u524d shell\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4ecd\u7136\u4f1a\u9000\u51fa\u3002 python3 a.py > a.out & \u53ef\u4ee5\u8bd5\u8bd5\u5982\u4e0a\u547d\u4ee4\uff0c\u770b\u770b\u5728 a.out \u4e2d\u662f\u5426\u6709\u9884\u671f\u8f93\u51fa\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u9000\u51fa\u5462\uff1f \u53ef\u4ee5\u4ece Signals \u4e2d\u4e86\u89e3\u5230\uff1a SIGHUP by default exits a shell. An interactive shell will send a SIGHUP to all jobs, running or stopped; see the documentation on the disown built-in if you want to disable this default behavior for a particular process. Use the huponexit option for killing all jobs upon receiving a SIGHUP signal, using the shopt built-in. \u5f53\u9000\u51fa shell \u65f6\uff0c\u4f1a\u5411\u6240\u6709\u7684\u4efb\u52a1\u53d1\u9001 SIGHUP \u4fe1\u53f7\uff0c\u6240\u4ee5\u6ca1\u6709\u505a\u7279\u6b8a\u5904\u7406\u7684\u8bdd\uff0c\u6240\u6709\u4efb\u52a1\u90fd\u4f1a\u88ab\u4e2d\u65ad\u3002 \u8fd9\u4e2a\u65f6\u5019\u5c31\u5f88\u597d\u7406\u89e3 nohup \u4e3a\u4ec0\u4e48\u53eb nohup \u4e86\u5427\uff0c\u5b83\u5c31\u662f\u7528\u6765\u5c4f\u853d SIGHUP \u4fe1\u53f7\u7684\uff0c\u8ba9\u7a0b\u5e8f\u514d\u53d7\u4e2d\u65ad\u3002 \u8fd9\u4e2a\u65f6\u5019\u518d\u6765\u56de\u987e\u4e00\u4e0b nohup \u5728 Man Page \u4e2d\u7684\u7b80\u4ecb\uff1a nohup - run a command immune to hangups, with output to a non-tty \u9898\u5916\u8bdd\uff1a\u5982\u679c\u60f3\u4e86\u89e3 TTY \u662f\u4ec0\u4e48\uff0c\u53ef\u4ee5\u53c2\u8003 TTY \u5230\u5e95\u662f\u4ec0\u4e48\uff1f \u53ef\u4ee5\u4e86\u89e3\u5230 nohup \u9664\u4e86\u5e2e\u52a9\u4f60\u5c4f\u853d SIGHUP \u4fe1\u53f7\uff0c\u8fd8\u5e2e\u52a9\u91cd\u5b9a\u5411\u4e86\u8f93\u51fa\u3002 \u6211\u4eec\u8bd5\u8bd5\u4e0b\u9762\u8fd9\u6761\u547d\u4ee4\uff1a nohup python3 a.py & \u53ef\u4ee5\u770b\u5230\u6211\u6ca1\u6709\u505a\u4efb\u4f55\u7684\u91cd\u5b9a\u5411\u64cd\u4f5c\uff0c\u4f46\u662f\u8f93\u51fa\u81ea\u52a8\u91cd\u5b9a\u5411\u5230\u4e86 nohup.out \u5f53\u4e2d\u3002 \u5176\u5b9e\u4ece Man Page \u4e2d\u53ef\u4ee5\u770b\u5230\u91cd\u5b9a\u5411\u7b56\u7565\uff1a If standard input is a terminal, redirect it from /dev/null. If standard output is a terminal, append output to 'nohup.out' if possible, '$HOME/nohup.out' otherwise. If standard error is a terminal, redirect it to standard output. To save output to FILE, use 'nohup COMMAND > FILE'. stdin \uff08\u6807\u51c6\u8f93\u5165\uff09\u4f1a\u88ab\u91cd\u5b9a\u5411\u5230 /dev/null stdout \uff08\u6807\u51c6\u8f93\u51fa\uff09\u88ab\u91cd\u5b9a\u5411\u5230 nohup.out \u6216 $HOME/nohup.out stderr \uff08\u6807\u51c6\u9519\u8bef\u8f93\u51fa\uff09\u4f1a\u88ab\u91cd\u5b9a\u5411\u5230 stdout \uff08\u6807\u51c6\u8f93\u51fa\uff09 \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\uff1a nohup python3 a.py & \u7b49\u4ef7\u4e8e nohup python3 a.py < /dev/null > nohup.out 2 > & 1 & \u5176\u4e2d\uff1a 1 \u8868\u793a stdout 2 \u8868\u793a stderr \u53e6\u5916\uff0c 0 \u8868\u793a stdin \u4e0d\u77e5\u4f60\u662f\u5426\u6709\u4e2a\u7591\u95ee\uff0c\u5c31\u662f stderr \u91cd\u5b9a\u5411\u5230 stdout \uff0c\u4e3a\u4ec0\u4e48\u4e0d\u662f 2>1 \u800c\u662f 2>&1 \u3002 \u8fd9\u662f\u56e0\u4e3a 2>1 \u65e0\u6cd5\u533a\u5206\u8fd9\u4e2a 1 \u662f\u4ee3\u8868\u6587\u4ef6\u540d\u8fd8\u662f\u4ee3\u8868 stdout \u3002 \u6709\u5174\u8da3\u53ef\u4ee5\u770b\u4e00\u4e0b\u8fd9\u4e2a\u56de\u7b54 https://superuser.com/a/846641 \u3002 \u5982\u679c\u6ca1\u6709\u663e\u5f0f\u7684\u91cd\u5b9a\u5411\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u6709\u7684\u7248\u672c\u7684 nohup \u4f1a\u63d0\u793a\u4f60\u5982\u4e0b\u4fe1\u606f nohup: ignoring input and redirecting stderr to stdout \u90a3\u5982\u679c\u53ea\u7528 nohup \uff0c\u800c\u4e0d\u7528 & \uff0c\u4f1a\u600e\u4e48\u6837\u5462\uff1f \u7559\u7ed9\u6709\u5174\u8da3\u7684\u8bfb\u8005\u81ea\u5df1\u5b9e\u9a8c\u3002","title":"\u7b80\u5355\u8bf4\u8bf4 nohup"},{"location":"2022/8/why-it-is-not-recommended-to-use-non-const-reference-input-parameters-in-c%2B%2B/","text":"Why it is not recommended to use non-const reference input parameters in C++ Background struct A { int a ; int b ; std :: string c ; }; int main () { A a ; Foo ( a ); } \u4e4b\u524d\u5728\u8bbe\u8ba1\u4e00\u4e2a\u63a5\u53e3\u7684\u65f6\u5019\uff0c\u6211\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a Foo() \u51fd\u6570\uff0c\u5b83\u9700\u8981\u63a5\u6536\u4e00\u4e2a\u5165\u53c2 A \uff0c\u5e76\u4e14\u8be5\u53c2\u6570\u5728\u51fd\u6570\u5185\u90e8\u4f1a\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002 First ideas \u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u6ca1\u6709\u8003\u8651\u4f7f\u7528\u6307\u9488\uff0c\u53ea\u8003\u8651\u5f15\u7528\u3002 \u4e8e\u662f\u6211\u5199\u4e0b\u4e86\u7b2c\u4e00\u4e2a\u51fd\u6570\uff1a void Foo ( A & a ) { ... } \u4f46\u662f\u8fd9\u6837\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u4e0d\u80fd\u4f20\u9012\u53f3\u503c\uff0c\u6bd4\u5982\u65e0\u6cd5\u50cf\u5982\u4e0b\u4ee3\u7801\u4e00\u6837\u8c03\u7528\uff1a Foo ( A { . a = 1 , . b = 2 , . c = \"\" , }); \u8fd9\u4e2a\u7b80\u5355\uff0c\u6211\u4eec\u52a0\u4e00\u4e2a\u91cd\u8f7d\u51fd\u6570\u5373\u53ef\uff1a void Foo ( A & a ) { ... } void Foo ( A && a ) { ... } \u8fd9\u6837\u4e0a\u8ff0\u7684\u95ee\u9898\u5373\u89e3\u51b3\u4e86\u3002 \u4f46\u662f\u8fd9\u6837\uff0c\u5bf9\u4e8e\u8c03\u7528\u8005\u6765\u8bf4\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u77e5\u9053 Foo \u4f1a\u4fee\u6539 A \uff0c\u6240\u4ee5\u6211\u60f3\u4f20\u5165\u4e00\u4e2a clone \u540e\u7684\u503c\uff0c\u8fd9\u6837\u9700\u8981\u8c03\u7528\u8005\u5728\u8c03\u7528\u4e4b\u524d\u5148 clone \u4e00\u4efd\uff0c\u8b6c\u5982\uff1a A a ; A a_clone = a ; Foo ( a_clone ); \u8fd9\u6837\u5c31\u4f1a\u591a\u4e00\u6b65\uff0c\u8fd8\u591a\u4e86\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\u3002 Final Solution \u6700\u540e\u60f3\u5230\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6307\u9488\uff0c\u8b6c\u5982\uff1a void Foo ( A a ) { ... } void Foo ( A * a ) { ... } \u5982\u6b64\u4e00\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8c03\u7528\uff1a A a ; Foo ( a ); // \u6df1\u62f7\u8d1d Foo ( std :: move ( a )); // \u79fb\u52a8 Foo ( & a ); // \u6d45\u62f7\u8d1d \u8c03\u7528\u8005\u5728\u8c03\u7528\u7684\u65f6\u5019\uff0c\u53ea\u770b\u5165\u53c2\u5c31\u80fd\u5224\u65ad a \u5728\u51fd\u6570\u8c03\u7528\u524d\u540e\u7684\u53d8\u52a8\u60c5\u51b5\uff0c\u76f8\u5bf9\u6bd4\u8f83\u6e05\u6670\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u591a\u51fa\u989d\u5916\u7684\u5c40\u90e8\u53d8\u91cf\u3002","title":"Why it is not recommended to use non-const reference input parameters in C++"},{"location":"2022/8/why-it-is-not-recommended-to-use-non-const-reference-input-parameters-in-c%2B%2B/#background","text":"struct A { int a ; int b ; std :: string c ; }; int main () { A a ; Foo ( a ); } \u4e4b\u524d\u5728\u8bbe\u8ba1\u4e00\u4e2a\u63a5\u53e3\u7684\u65f6\u5019\uff0c\u6211\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a Foo() \u51fd\u6570\uff0c\u5b83\u9700\u8981\u63a5\u6536\u4e00\u4e2a\u5165\u53c2 A \uff0c\u5e76\u4e14\u8be5\u53c2\u6570\u5728\u51fd\u6570\u5185\u90e8\u4f1a\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002","title":"Background"},{"location":"2022/8/why-it-is-not-recommended-to-use-non-const-reference-input-parameters-in-c%2B%2B/#first-ideas","text":"\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u6ca1\u6709\u8003\u8651\u4f7f\u7528\u6307\u9488\uff0c\u53ea\u8003\u8651\u5f15\u7528\u3002 \u4e8e\u662f\u6211\u5199\u4e0b\u4e86\u7b2c\u4e00\u4e2a\u51fd\u6570\uff1a void Foo ( A & a ) { ... } \u4f46\u662f\u8fd9\u6837\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u4e0d\u80fd\u4f20\u9012\u53f3\u503c\uff0c\u6bd4\u5982\u65e0\u6cd5\u50cf\u5982\u4e0b\u4ee3\u7801\u4e00\u6837\u8c03\u7528\uff1a Foo ( A { . a = 1 , . b = 2 , . c = \"\" , }); \u8fd9\u4e2a\u7b80\u5355\uff0c\u6211\u4eec\u52a0\u4e00\u4e2a\u91cd\u8f7d\u51fd\u6570\u5373\u53ef\uff1a void Foo ( A & a ) { ... } void Foo ( A && a ) { ... } \u8fd9\u6837\u4e0a\u8ff0\u7684\u95ee\u9898\u5373\u89e3\u51b3\u4e86\u3002 \u4f46\u662f\u8fd9\u6837\uff0c\u5bf9\u4e8e\u8c03\u7528\u8005\u6765\u8bf4\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u77e5\u9053 Foo \u4f1a\u4fee\u6539 A \uff0c\u6240\u4ee5\u6211\u60f3\u4f20\u5165\u4e00\u4e2a clone \u540e\u7684\u503c\uff0c\u8fd9\u6837\u9700\u8981\u8c03\u7528\u8005\u5728\u8c03\u7528\u4e4b\u524d\u5148 clone \u4e00\u4efd\uff0c\u8b6c\u5982\uff1a A a ; A a_clone = a ; Foo ( a_clone ); \u8fd9\u6837\u5c31\u4f1a\u591a\u4e00\u6b65\uff0c\u8fd8\u591a\u4e86\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\u3002","title":"First ideas"},{"location":"2022/8/why-it-is-not-recommended-to-use-non-const-reference-input-parameters-in-c%2B%2B/#final-solution","text":"\u6700\u540e\u60f3\u5230\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6307\u9488\uff0c\u8b6c\u5982\uff1a void Foo ( A a ) { ... } void Foo ( A * a ) { ... } \u5982\u6b64\u4e00\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8c03\u7528\uff1a A a ; Foo ( a ); // \u6df1\u62f7\u8d1d Foo ( std :: move ( a )); // \u79fb\u52a8 Foo ( & a ); // \u6d45\u62f7\u8d1d \u8c03\u7528\u8005\u5728\u8c03\u7528\u7684\u65f6\u5019\uff0c\u53ea\u770b\u5165\u53c2\u5c31\u80fd\u5224\u65ad a \u5728\u51fd\u6570\u8c03\u7528\u524d\u540e\u7684\u53d8\u52a8\u60c5\u51b5\uff0c\u76f8\u5bf9\u6bd4\u8f83\u6e05\u6670\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u591a\u51fa\u989d\u5916\u7684\u5c40\u90e8\u53d8\u91cf\u3002","title":"Final Solution"},{"location":"2023/5/a-shallow-copy-problem-in-python3/","text":"A shallow copy problem in Python 3 \u6700\u8fd1\u5728\u5f00\u53d1 board-spider \u8fc7\u7a0b\u4e2d\uff0c\u9047\u5230\u4e00\u4e2a\u6df1\u62f7\u8d1d\u7684\u95ee\u9898\uff0c\u611f\u89c9\u633a\u522b\u81f4\u7684\u3002 \u4ee3\u7801\u7b80\u5316\u5982\u4e0b\uff1a import typing class Team : def __init__ ( self , extra : typing . Dict [ str , typing . Any ] = {}): self . extra = extra def work ( teams : typing . List [ Team ]): for team in teams : if some condition : team . extra [ \"a\" ] = True \u5982\u679c\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u7684 {} \uff0c\u90a3\u4e48\u4f60\u4f1a\u53d1\u73b0\uff0c\u7ecf\u8fc7 work \u51fd\u6570\u5904\u7406\u4e4b\u540e\uff0c\u6bcf\u4e2a team \u7684 extra[\"a\"] \u7684\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002 \u56e0\u4e3a\u6bcf\u4e2a team.extra \u90fd\u6307\u5411\u90a3\u4e2a {} \u5bf9\u8c61\u3002 \u5176\u4e2d\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\uff0c\u5728 __init__ \u4f5c\u7528\u57df\u5185\uff0c\u7ed9\u5b83\u8d4b\u4e88\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u6bd4\u5982\uff1a import typing class Team : def __init__ ( self , extra : typing . Dict [ str , typing . Any ] = None ): if extra is not None : self . extra = extra else : self . extra = {}","title":"A shallow copy problem in Python 3"},{"location":"2023/6/a-problem-about-ssh-zsh-proxy-ipv6/","text":"A problem about SSH, ZSH, Proxy and IPv6 Write in front \u4f17\u6240\u5468\u77e5\uff0c\u8981\u60f3\u8fdb\u5165\u67d0\u4e2a\u9ad8\u6821\u7684\u670d\u52a1\u5668\uff0c\u4e00\u822c\u6ca1\u90a3\u4e48\u7b80\u5355\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u9ad8\u6821\u7684\u4fe1\u606f\u5316\u4e2d\u5fc3\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u8df3\u677f\u673a\u7684\u5730\u5740\uff0c\u8b6c\u5982 jump.edu.cn \u3002 \u90a3\u4e48\u4f60\u53ea\u9700\u8981\u5148 ssh \u8fdb\u5165\u8df3\u677f\u673a\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u53f0\u673a\u5668 ssh \u5230\u4f60\u60f3\u8981\u8fdb\u5165\u7684\u6821\u5185\u670d\u52a1\u5668\u3002 \u4f46\u662f\u8fd9\u6837\u505a\uff0c\u6709\u4e00\u4e9b\u95ee\u9898\uff1a \u6bcf\u6b21\u767b\u5f55\u5230\u6307\u5b9a\u670d\u52a1\u5668\u81f3\u5c11\u9700\u8981\u4e24\u6b65\uff0c\u5148 ssh \u8fdb\u8df3\u677f\u673a\uff0c\u518d ssh \u5230\u6307\u5b9a\u673a\u5668\uff0c\u65e0\u6cd5\u901a\u8fc7\u4e00\u6761\u547d\u4ee4\u5b8c\u6210\u3002 session \u7684\u9a7b\u7559\u65f6\u95f4\u53d7\u5230\u8df3\u677f\u673a\u914d\u7f6e\u7684\u9650\u5236\u3002 \u8981\u60f3\u4ece\u670d\u52a1\u5668\u4e2d\u5c06\u6587\u4ef6\u590d\u5236\u51fa\u6765\u5f88\u4e0d\u65b9\u4fbf\u3002 \u90a3\u4ee5\u4e0a\u7684\u51e0\u4e2a\u95ee\u9898\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u5b9e\u5728\u662f\u4e0d\u80fd\u5bb9\u5fcd\uff0c\u90a3\u4e48\u5fc5\u7136\u8981\u53e6\u8f9f\u8e4a\u5f84\u3002 Problems And Solution \u4f46\u5b9e\u9645\u4e0a\u4e0a\u8ff0\u51e0\u4e2a\u95ee\u9898\uff0c\u5728 ssh \u9762\u524d\uff0c\u5b8c\u5168\u662f\u5c0f\u83dc\u4e00\u789f\u3002 \u6211\u4eec\u53ea\u9700\u8981\u4f7f\u7528 ProxyCommand \u5373\u53ef\uff1a # login to the target server ssh -o ProxyCommand = \"ssh -qW %h:%p ${ jump_server } \" \" ${ target_server } \" # copy files from target server scp -o ProxyCommand = \"ssh -qW %h:%p ${ jump_server } \" ${ source_file } ${ destination_file } \u5728 IPv4 \u65f6\u4ee3\uff0c\u8fd9\u6837\u505a\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u6211\u4eec\u76f8\u5904\u7684\u5341\u5206\u548c\u8c10\u3002 \u6709\u4e00\u5929\uff0c\u5b66\u6821\u91c7\u8d2d\u4e86\u4e00\u6279\u673a\u5668\uff0c\u4f46\u662f\u6ca1\u6709 IPv4 \u7684\u5730\u5740\u80fd\u591f\u5206\u914d\u7ed9\u5b83\u4eec\u4e86\uff0c\u6240\u4ee5\u53ea\u80fd\u591f\u7ed9\u5b83\u4eec\u5206\u914d IPv6 \u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u9700\u8981\u901a\u8fc7 IPv6 \u767b\u5f55\u8fdb\u8fd9\u4e9b\u670d\u52a1\u5668\u3002 \u90a3\u4e48\u6211\u4f9d\u6837\u753b\u846b\u82a6\uff0c\u76f4\u63a5\u5728 ${target_server} \u5904\u586b\u4e0a username@ipv6-addr \uff0c \u76f4\u63a5\u7ed9\u6211\u6765\u4e86\u4e00\u884c\u62a5\u9519\uff0c\u90a3\u4e48\u6211\u731c\u60f3\uff0c\u5730\u5740\u7684\u5c3e\u90e8\u591a\u4e86 :22 \uff0c\u662f\u4e0d\u662f port \u548c addr \u6df7\u5728\u4e00\u8d77\u65e0\u6cd5\u8bc6\u522b\uff0c\u9700\u8981\u7ed9 addr \u52a0\u4e0a [] \u4e86\uff1f \u53c8\u662f\u4e00\u884c\u62a5\u9519\u3002 \u8fd9\u6709\u4e00\u70b9\u5947\u602a\u5b50\uff0c\u6ca1\u6709\u4ec0\u4e48\u601d\u8def\uff0c\u53ea\u80fd\u5148\u95ee\u95ee chatGPT\uff1b OK\uff0c\u90a3\u6211\u4eec\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\uff1a ssh -o ProxyCommand = 'ssh -qW \"%h\":%p ${jump_server}' root@ \"[ff:ff:ff:ff:ff:ff:ff:ff]\" \u7136\u540e\u6211\u4eec\u5c31\u80fd\u6210\u529f\u8fdb\u5165\u670d\u52a1\u5668\u4e86\uff0c\u5982\u679c\u60f3\u5c11\u6253\u4e00\u70b9\u5b57\u7b26\uff0c\u6362\u6210\u8fd9\u79cd\u5f62\u5f0f\u4e5f\u53ef\uff1a ssh -o ProxyCommand = 'ssh -qW \"[%h]\":%p ${jump_server}' root@ff:ff:ff:ff:ff:ff:ff:ff \u540c\u7406\uff0c\u5bf9\u4e8e scp\uff0c\u53ea\u9700\u8981\u76f8\u5e94\u7684\u53d8\u6362\u4e00\u4e0b\uff1a scp -o ProxyCommand = 'ssh -qW \"[%h]\":%p ${jump_server}' ${ source_file } ${ destination_file } \u540e\u6765\u6211\u53d1\u73b0\uff0c\u5176\u5b9e\u8fd8\u6709\u4e00\u4e2a\u9009\u9879\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ProxyJump\uff0c\u800c\u5728 ssh \u4e2d\uff0c\u5bf9\u5e94 -J \u53c2\u6570\uff1a -J destination Connect to the target host by first making a ssh connection to the jump host described by destination and then establishing a TCP forwarding to the ultimate destination from there. Multiple jump hops may be specified separated by comma characters. This is a shortcut to specify a ProxyJump configuration directive. Note that configuration directives supplied on the command-line generally apply to the destination host and not any specified jump hosts. Use ~/.ssh/config to specify configuration for jump hosts. \u6240\u4ee5\u5bf9\u5e94\u7684\u547d\u4ee4\u5982\u4e0b\uff1a # login to the target server ssh -J \" ${ jump_server } \" \" ${ target_server } \" # copy files from target server scp -J \" ${ jump_server } \" ${ source_file } ${ destination_file } \u975e\u5e38\u7684\u7b80\u5355\uff0c\u800c\u4e14\u5bf9\u4e8e v4, v6 \u901a\u5403\u3002","title":"A problem about SSH, ZSH, Proxy and IPv6"},{"location":"2023/6/a-problem-about-ssh-zsh-proxy-ipv6/#write-in-front","text":"\u4f17\u6240\u5468\u77e5\uff0c\u8981\u60f3\u8fdb\u5165\u67d0\u4e2a\u9ad8\u6821\u7684\u670d\u52a1\u5668\uff0c\u4e00\u822c\u6ca1\u90a3\u4e48\u7b80\u5355\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u9ad8\u6821\u7684\u4fe1\u606f\u5316\u4e2d\u5fc3\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u8df3\u677f\u673a\u7684\u5730\u5740\uff0c\u8b6c\u5982 jump.edu.cn \u3002 \u90a3\u4e48\u4f60\u53ea\u9700\u8981\u5148 ssh \u8fdb\u5165\u8df3\u677f\u673a\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u53f0\u673a\u5668 ssh \u5230\u4f60\u60f3\u8981\u8fdb\u5165\u7684\u6821\u5185\u670d\u52a1\u5668\u3002 \u4f46\u662f\u8fd9\u6837\u505a\uff0c\u6709\u4e00\u4e9b\u95ee\u9898\uff1a \u6bcf\u6b21\u767b\u5f55\u5230\u6307\u5b9a\u670d\u52a1\u5668\u81f3\u5c11\u9700\u8981\u4e24\u6b65\uff0c\u5148 ssh \u8fdb\u8df3\u677f\u673a\uff0c\u518d ssh \u5230\u6307\u5b9a\u673a\u5668\uff0c\u65e0\u6cd5\u901a\u8fc7\u4e00\u6761\u547d\u4ee4\u5b8c\u6210\u3002 session \u7684\u9a7b\u7559\u65f6\u95f4\u53d7\u5230\u8df3\u677f\u673a\u914d\u7f6e\u7684\u9650\u5236\u3002 \u8981\u60f3\u4ece\u670d\u52a1\u5668\u4e2d\u5c06\u6587\u4ef6\u590d\u5236\u51fa\u6765\u5f88\u4e0d\u65b9\u4fbf\u3002 \u90a3\u4ee5\u4e0a\u7684\u51e0\u4e2a\u95ee\u9898\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u5b9e\u5728\u662f\u4e0d\u80fd\u5bb9\u5fcd\uff0c\u90a3\u4e48\u5fc5\u7136\u8981\u53e6\u8f9f\u8e4a\u5f84\u3002","title":"Write in front"},{"location":"2023/6/a-problem-about-ssh-zsh-proxy-ipv6/#problems-and-solution","text":"\u4f46\u5b9e\u9645\u4e0a\u4e0a\u8ff0\u51e0\u4e2a\u95ee\u9898\uff0c\u5728 ssh \u9762\u524d\uff0c\u5b8c\u5168\u662f\u5c0f\u83dc\u4e00\u789f\u3002 \u6211\u4eec\u53ea\u9700\u8981\u4f7f\u7528 ProxyCommand \u5373\u53ef\uff1a # login to the target server ssh -o ProxyCommand = \"ssh -qW %h:%p ${ jump_server } \" \" ${ target_server } \" # copy files from target server scp -o ProxyCommand = \"ssh -qW %h:%p ${ jump_server } \" ${ source_file } ${ destination_file } \u5728 IPv4 \u65f6\u4ee3\uff0c\u8fd9\u6837\u505a\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u6211\u4eec\u76f8\u5904\u7684\u5341\u5206\u548c\u8c10\u3002 \u6709\u4e00\u5929\uff0c\u5b66\u6821\u91c7\u8d2d\u4e86\u4e00\u6279\u673a\u5668\uff0c\u4f46\u662f\u6ca1\u6709 IPv4 \u7684\u5730\u5740\u80fd\u591f\u5206\u914d\u7ed9\u5b83\u4eec\u4e86\uff0c\u6240\u4ee5\u53ea\u80fd\u591f\u7ed9\u5b83\u4eec\u5206\u914d IPv6 \u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u9700\u8981\u901a\u8fc7 IPv6 \u767b\u5f55\u8fdb\u8fd9\u4e9b\u670d\u52a1\u5668\u3002 \u90a3\u4e48\u6211\u4f9d\u6837\u753b\u846b\u82a6\uff0c\u76f4\u63a5\u5728 ${target_server} \u5904\u586b\u4e0a username@ipv6-addr \uff0c \u76f4\u63a5\u7ed9\u6211\u6765\u4e86\u4e00\u884c\u62a5\u9519\uff0c\u90a3\u4e48\u6211\u731c\u60f3\uff0c\u5730\u5740\u7684\u5c3e\u90e8\u591a\u4e86 :22 \uff0c\u662f\u4e0d\u662f port \u548c addr \u6df7\u5728\u4e00\u8d77\u65e0\u6cd5\u8bc6\u522b\uff0c\u9700\u8981\u7ed9 addr \u52a0\u4e0a [] \u4e86\uff1f \u53c8\u662f\u4e00\u884c\u62a5\u9519\u3002 \u8fd9\u6709\u4e00\u70b9\u5947\u602a\u5b50\uff0c\u6ca1\u6709\u4ec0\u4e48\u601d\u8def\uff0c\u53ea\u80fd\u5148\u95ee\u95ee chatGPT\uff1b OK\uff0c\u90a3\u6211\u4eec\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\uff1a ssh -o ProxyCommand = 'ssh -qW \"%h\":%p ${jump_server}' root@ \"[ff:ff:ff:ff:ff:ff:ff:ff]\" \u7136\u540e\u6211\u4eec\u5c31\u80fd\u6210\u529f\u8fdb\u5165\u670d\u52a1\u5668\u4e86\uff0c\u5982\u679c\u60f3\u5c11\u6253\u4e00\u70b9\u5b57\u7b26\uff0c\u6362\u6210\u8fd9\u79cd\u5f62\u5f0f\u4e5f\u53ef\uff1a ssh -o ProxyCommand = 'ssh -qW \"[%h]\":%p ${jump_server}' root@ff:ff:ff:ff:ff:ff:ff:ff \u540c\u7406\uff0c\u5bf9\u4e8e scp\uff0c\u53ea\u9700\u8981\u76f8\u5e94\u7684\u53d8\u6362\u4e00\u4e0b\uff1a scp -o ProxyCommand = 'ssh -qW \"[%h]\":%p ${jump_server}' ${ source_file } ${ destination_file } \u540e\u6765\u6211\u53d1\u73b0\uff0c\u5176\u5b9e\u8fd8\u6709\u4e00\u4e2a\u9009\u9879\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ProxyJump\uff0c\u800c\u5728 ssh \u4e2d\uff0c\u5bf9\u5e94 -J \u53c2\u6570\uff1a -J destination Connect to the target host by first making a ssh connection to the jump host described by destination and then establishing a TCP forwarding to the ultimate destination from there. Multiple jump hops may be specified separated by comma characters. This is a shortcut to specify a ProxyJump configuration directive. Note that configuration directives supplied on the command-line generally apply to the destination host and not any specified jump hosts. Use ~/.ssh/config to specify configuration for jump hosts. \u6240\u4ee5\u5bf9\u5e94\u7684\u547d\u4ee4\u5982\u4e0b\uff1a # login to the target server ssh -J \" ${ jump_server } \" \" ${ target_server } \" # copy files from target server scp -J \" ${ jump_server } \" ${ source_file } ${ destination_file } \u975e\u5e38\u7684\u7b80\u5355\uff0c\u800c\u4e14\u5bf9\u4e8e v4, v6 \u901a\u5403\u3002","title":"Problems And Solution"}]}